<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CMIP 用户文档</title>
    <link href="/2021/11/21/CMIP%20%E7%94%A8%E6%88%B7%E6%96%87%E6%A1%A3/"/>
    <url>/2021/11/21/CMIP%20%E7%94%A8%E6%88%B7%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p align="center"><font size="6">CMIP 用户文档</font></p><p align="center">中国科学院数学与系统科学研究院</p><p></p><p>[TOC]</p><h2 id="一、软件安装"><a href="#一、软件安装" class="headerlink" title="一、软件安装"></a>一、软件安装</h2><h3 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1. 环境说明"></a>1. 环境说明</h3><ul><li>需安装最新版本的 Clp(1.17.6)</li><li>编译器版本：gcc 7.5.0 &amp;&amp; g++ 7.5.0</li></ul><h3 id="2-利用-coinbrew-安装-Clp"><a href="#2-利用-coinbrew-安装-Clp" class="headerlink" title="2. 利用 coinbrew 安装 Clp"></a>2. 利用 coinbrew 安装 Clp</h3><p>参考链接：<a href="https://coin-or.github.io/user_introduction" target="_blank" rel="noopener">https://coin-or.github.io/user_introduction</a></p><h4 id="1-下载-coinbrew"><a href="#1-下载-coinbrew" class="headerlink" title="(1) 下载 coinbrew"></a>(1) 下载 coinbrew</h4><p>在用户目录或其他合适路径下输入</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://www.github.com/coin-<span class="hljs-keyword">or</span>/coinbrew<br></code></pre></div></td></tr></table></figure><p>接着输入</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-built_in">cd</span> coinbrew<br>chmod u+x coinbrew<br></code></pre></div></td></tr></table></figure><h4 id="2-抓取源码"><a href="#2-抓取源码" class="headerlink" title="(2) 抓取源码"></a>(2) 抓取源码</h4><p>输入 <code>./coinbrew</code>，运行 coinbrew，出现以下提示信息：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">Welcome to the COIN-OR fetch and build utility<br><br>For <span class="hljs-keyword">help</span>, run script <span class="hljs-keyword">with</span> <span class="hljs-comment">--help or see https://coin-or.github.io/coinbrew</span><br>Please report issues <span class="hljs-keyword">at</span> https://github.com/coin-<span class="hljs-keyword">or</span>/coinbrew<br>Detailed <span class="hljs-keyword">build</span> documentation <span class="hljs-keyword">at</span> https://coin-or.github.io<br><br>Please <span class="hljs-keyword">choose</span> an <span class="hljs-keyword">action</span> <span class="hljs-keyword">by</span> typing <span class="hljs-number">1</span><span class="hljs-number">-4.</span><br> <span class="hljs-number">1.</span> <span class="hljs-keyword">Fetch</span> <span class="hljs-keyword">source</span> code <span class="hljs-keyword">of</span> a <span class="hljs-keyword">project</span> <span class="hljs-keyword">and</span> its dependencies.<br> <span class="hljs-number">2.</span> <span class="hljs-keyword">Build</span> a <span class="hljs-keyword">project</span> <span class="hljs-keyword">and</span> its dependencies.<br> <span class="hljs-number">3.</span> <span class="hljs-keyword">Install</span> a <span class="hljs-keyword">project</span> <span class="hljs-keyword">and</span> its dependencies.<br> <span class="hljs-number">4.</span> <span class="hljs-keyword">Help</span><br>=&gt;<br></code></pre></div></td></tr></table></figure><p>输入 1，然后选择 Clp，选择最新版本，进行 Clp 和依赖文件源码的抓取.</p><h4 id="3-构建和安装"><a href="#3-构建和安装" class="headerlink" title="(3) 构建和安装"></a>(3) 构建和安装</h4><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-bullet">1. </span>cd coin-Clp<br><span class="hljs-bullet">2. </span>./configure -C<br><span class="hljs-bullet">3. </span>make -j<br><span class="hljs-bullet">4. </span>make install<br></code></pre></div></td></tr></table></figure><h3 id="3-安装-CMIP"><a href="#3-安装-CMIP" class="headerlink" title="3. 安装 CMIP"></a>3. 安装 CMIP</h3><ul><li><p>解压 cmip.7z</p></li><li><p>配置Clp到cmip：</p></li></ul><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-number">1</span>.进入 cmip 目录，生成并进入 interface 目录: mkdir interface &amp;&amp; cd interface.<br><span class="hljs-number">2</span>.生成并进入 Clp 目录: mkdir Clp &amp;&amp; cd Clp.<br><span class="hljs-number">3</span>.生成 header 目录: mkdir header.<br><span class="hljs-number">4</span>.生成 <span class="hljs-class"><span class="hljs-keyword">lib</span> 目录：<span class="hljs-title">mkdir</span> <span class="hljs-title">lib</span></span><br><span class="hljs-number">5</span>.复制 CLP/<span class="hljs-keyword">include</span>/coin/ 下所有头文件到 header 目录下: cp CLP/<span class="hljs-keyword">include</span>/coin/* ./header/<br><span class="hljs-number">6</span>.复制 CLP/<span class="hljs-class"><span class="hljs-keyword">lib</span> 下所有库文件到 <span class="hljs-title">lib</span> 目录下： <span class="hljs-title">cp</span> <span class="hljs-title">CLP</span>/<span class="hljs-title">lib</span>/* ./<span class="hljs-title">lib</span>/</span><br></code></pre></div></td></tr></table></figure><ul><li>在 cmip 目录下执行 <code>make</code></li></ul><h2 id="二、软件使用"><a href="#二、软件使用" class="headerlink" title="二、软件使用"></a>二、软件使用</h2><p>使用方法：直接在命令行输入命令.</p><p>进入 cmipwork 所在目录，运行命令格式如下：</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">.<span class="hljs-meta-keyword">/bin/</span>cmip -f <span class="hljs-params">&lt;文件名&gt;</span> [-s <span class="hljs-params">&lt;参数&gt;</span>]<br></code></pre></div></td></tr></table></figure><ul><li><p><code>-f</code>：从文件(file)中读取问题或高级启动信息.</p></li><li><p><code>-s</code>：设置(set)参数，参数格式为键值对，即 <code>[key] [value]</code>. 可输入的键(key)有：</p></li></ul><table><thead><tr><th align="center">键</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>cmip/timeTolerance</code></td><td align="center">时间限制(Time limit)，单位：秒</td></tr><tr><td align="center"><code>print/solOutput</code></td><td align="center">解的输出文件路径(File path for output solution)</td></tr><tr><td align="center"><code>cmip/gapTolerance</code></td><td align="center">Gap limit</td></tr><tr><td align="center"><code>cmip/nodeTolerance</code></td><td align="center">Node limit</td></tr></tbody></table><p>运行命令示例如下：</p><ul><li><p><code>./bin/cmip -f XXX.mps</code></p><p>读取 <code>XXX.mps</code>，并求解.</p></li><li><p><code>./bin/cmip -f XXX.mps -s cmip/timeTolerance 3600 cmip/gapTolerance 0.01</code></p><p>读取 <code>XXX.mps</code>；最长求解时间为 3600 秒；求解 gap 为 0.01.</p></li><li><p><code>./bin/cmip -f XXX.mps -s print/solOutput ./solOutput.txt</code></p><p>读取 <code>XXX.mps</code>；将求出的解存储在 <code>./solOutput.txt</code> 文件中.</p></li></ul><h2 id="三、软件测试"><a href="#三、软件测试" class="headerlink" title="三、软件测试"></a>三、软件测试</h2><p>执行 <code>make test [TEST=XXX] [TIME=time]</code> 进行测试，后可加相关参数：</p><ul><li>TEST=XXX ：XXX 表示在 <code>check/testsets/</code> 目录下的 <code>XXX.test</code> 文件，存放待测试的算例，默认为 <code>testeasy</code>.  <code>testeasy</code> 对应于 <code>check/testsets</code> 目录下的 <code>testeasy.test</code> 与 <code>testeasy.solu</code> 文件(后者可以没有)，<code>testeasy.test</code> 存放每个算例的路径，<code>testeasy.solu</code> 存放算例的最优值.</li><li>TIME=time ：time 为时间上限，单位为秒，默认值为 7200.</li></ul><h2 id="四、接口参考"><a href="#四、接口参考" class="headerlink" title="四、接口参考"></a>四、接口参考</h2><h3 id="1、环境说明"><a href="#1、环境说明" class="headerlink" title="1、环境说明"></a>1、环境说明</h3><p>需要包含 <code>cmipwork/src/cmip/CMIP.h</code> 文件， </p><h3 id="2、函数声明"><a href="#2、函数声明" class="headerlink" title="2、函数声明"></a>2、函数声明</h3><h4 id="（2）bool-CMIP-CMIPNewVariables-int-nVars-double-obj-double-lb-double-ub-CMIPVarType-ctype-string-cName"><a href="#（2）bool-CMIP-CMIPNewVariables-int-nVars-double-obj-double-lb-double-ub-CMIPVarType-ctype-string-cName" class="headerlink" title="（2）bool CMIP::CMIPNewVariables(int nVars, double* obj, double* lb, double* ub, CMIPVarType* ctype, string* cName);."></a>（2）<code>bool CMIP::CMIPNewVariables(int nVars, double* obj, double* lb, double* ub, CMIPVarType* ctype, string* cName);</code>.</h4><p>添加变量.</p><ul><li><p>nVars - 变量数量.</p></li><li><p>obj   - 目标函数系数.</p></li><li><p>lb    - 变量下界.</p></li><li><p>ub    - 变量上界.</p></li><li><p>ctype - 变量类型.</p></li><li><p>cName - 变量名称.</p></li></ul><h4 id="3-bool-CMIPAddConstraints-int-nRows-int-nnz-double-lhs-double-rhs-int-rmatbeg-int-rmatind-double-rmatval-string-cName"><a href="#3-bool-CMIPAddConstraints-int-nRows-int-nnz-double-lhs-double-rhs-int-rmatbeg-int-rmatind-double-rmatval-string-cName" class="headerlink" title="(3) bool CMIPAddConstraints(int nRows, int nnz, double* lhs, double* rhs, int* rmatbeg, int* rmatind, double* rmatval, string* cName);."></a>(3) <code>bool CMIPAddConstraints(int nRows, int nnz, double* lhs, double* rhs, int* rmatbeg, int* rmatind, double* rmatval, string* cName);</code>.</h4><p>添加约束.</p><ul><li><p>nRows   - 约束数量.</p></li><li><p>nnz     - 非零元数量.</p></li><li><p>lhs     - 约束左端项.</p></li><li><p>rhs     - 约束右端项.</p></li><li><p>rmatbeg - 和<code>rmatind</code>以及<code>rmatval</code>一起定义所要添加的约束. </p><p><code>rmatbeg</code>用来定义非零元索引，<br>第i条约束的列标被记录在<code>rmatind[rmatbeg[i]]</code>到<code>rmatind[rmatbeg[i+1]-1]</code>之间.<br>第i条约束的系数被记录在<code>rmatval[rmatbeg[i]]</code>到<code>rmatval[rmatbeg[i+1]-1]</code>之间.</p></li><li><p>rmatind - 见<code>rmatbeg</code>.</p></li><li><p>rmatval - 见<code>rmatbeg</code>.</p></li><li><p>cName   - 约束名称.</p></li></ul><h4 id="4-bool-WriteModel-bool-isOriginModel-string-str"><a href="#4-bool-WriteModel-bool-isOriginModel-string-str" class="headerlink" title="(4) bool WriteModel(bool isOriginModel, string str);."></a>(4) <code>bool WriteModel(bool isOriginModel, string str);</code>.</h4><p>输出模型.</p><ul><li><p>isOriginModel   - <code>true</code>为原始模型, <code>false</code>为预处理后模型.</p></li><li><p>str             - 输出文件名(“.mps”后缀的输出mps格式文件，.lp后缀的输出lp格式文件).</p></li></ul><h3 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h3><ul><li>见<code>cmipwork/examples/src</code></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>用户文档</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>patoh</title>
    <link href="/2021/09/15/patoh/patoh/"/>
    <url>/2021/09/15/patoh/patoh/</url>
    
    <content type="html"><![CDATA[<h2 id="patoh相关"><a href="#patoh相关" class="headerlink" title="patoh相关"></a><label style="color:blue">patoh相关</label></h2><a id="more"></a><!-- ## <label style="color:red">自己用的模板</labels> --><label>   上来先把下载方式贴上，不会解压的话看我<a href="https://lostedsailor.github.io/2019/06/19/SystemLearning/Linux%E6%95%99%E7%A8%8B(1)/" target="_blank" rel="noopener">另一篇博客<a><br></a></a></label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://www.cc.gatech.edu/~umit/PaToH/patoh-Linux-x86_64.tar.gz<br></code></pre></div></td></tr></table></figure><br><h3 id="一-超图划分问题介绍（简单介绍）："><a href="#一-超图划分问题介绍（简单介绍）：" class="headerlink" title="一. 超图划分问题介绍（简单介绍）："></a>一. 超图划分问题介绍（简单介绍）：</h3><h4 id="1-什么是超图："><a href="#1-什么是超图：" class="headerlink" title="1.什么是超图："></a>1.什么是超图：</h4><label>   H=(V,N)是一个超图，V是图的顶点集，N是net集，net是V的子集。 <br></label><label style="color:darkblue;">   可能的疑问：一个net跟一个团有什么区别？ <br>   _答：举个例子，三个net:{a,b,c},{b,c,d},{c,d,a}. 这是三个net，一个团.而不是三个团，用团表示的话会“缺失信息”.<br>   net和普通的图中的边（edge）对应，有的人叫超边。 <br></label><h4 id="2-超图划分："><a href="#2-超图划分：" class="headerlink" title="2.超图划分："></a>2.超图划分：</h4><label>   H=(V,N)是一个超图.把V划分为k个不交的点集D={W1,W2,...,Wk},就是H一个划分(跟普通图划分定义相同).<br></label><h4 id="3-问题介绍："><a href="#3-问题介绍：" class="headerlink" title="3.问题介绍："></a>3.问题介绍：</h4><label>   H=(V,N)是一个超图，D={W1,W2,...,Wk}是H一个划分.对于这个划分，找一个net集N，   使得D被覆盖(被覆盖指的是对每个Wi，其中至少有一个点包含在某个N中的某个net里),   且费用最小（每个net会给定一个费用，N的费用就是N包含的net的费用的和）.   那么这个最小费用就是就是这个划分D的费用.<br>   目标：找到费用最小且满足平衡性条件的划分.<br>   (满足平衡性条件：每个点也有个权值，对于一个划分，各个部分的点权和相差不能太多)<br></label><h3 id="二-超图划分的迭代算法"><a href="#二-超图划分的迭代算法" class="headerlink" title="二. 超图划分的迭代算法"></a>二. 超图划分的迭代算法</h3><br><label style="color:darkblue;">   这部分暂时不急我后面补<br></label><br><h3 id="三-patoh的参数"><a href="#三-patoh的参数" class="headerlink" title="三. patoh的参数"></a>三. patoh的参数</h3><h4 id="IB"><a href="#IB" class="headerlink" title="IB"></a>IB</h4><label style="color:darkblue;">   先说一个重要参数IB（imbalance）这个参数的取值是0到0.5的浮点型.<br>   其含义就是超图划分问题提到的那个不平衡参数.大概意思就是： Spend_of_each_part  &lt; Average_spend_of_part*(1+IB)<br>   如果设置的这个IB太小，导致问题没解的话，会提示---- BALANCE IS NOT TIGHT ENOUGH ----（如下所示）.<br>   当然我觉得这东西按迭代算法的话意义不大，但是转化成整数规划问题求解的话，我估计这个参数非常重要,会影响求解时间。<br></label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><br>+++++++++++++++++++++++++++++++++++++++++++++++++++++++<br>+++ PaToH v3.3 (c) Nov 1999-, by  Umit V. Catalyurek<br>+++ Build Date: Wed Jul 15 00:24:52 2020 -0400<br>+++++++++++++++++++++++++++++++++++++++++++++++++++++++<br><br>********************************************************************************<br>Hypergraph : 111.u   <span class="hljs-comment">#Cells :     8   #Nets :     9   #Pins :    28</span><br>********************************************************************************<br> 5-way partitioning results of PaToH:<br><br> <span class="hljs-string">'Con - 1'</span> Cost:   213<br> Part Weights   : Min=         80 (0.235) Max=        145 (0.386)<br>---- BALANCE IS NOT TIGHT ENOUGH ----<br>--------------------------------------------------------------------------------<br>I/O          :       0.000 sec<br>I.Perm/Cons.H:       0.000 sec  ( 0.6%)<br>Coarsening   :       0.000 sec  ( 0.3%)<br>Partitioning :       0.001 sec  (82.5%)<br>Uncoarsening :       0.000 sec  (10.6%)<br>Total        :       0.001 sec<br>Total (w I/O):       0.001 sec<br>--------------------------------------------------------------------------------<br></code></pre></div></td></tr></table></figure><br><h4 id="other"><a href="#other" class="headerlink" title="other"></a>other</h4><label style="color:darkblue;">   剩下参数目前不觉得很重要，我后面补，但是值得注意的是patoh的参数设置会影响计算速度。<br>   我自己测试的时候，目前可以确定的是：对于一秒内可以出来的问题，RA这个参数会导致计算速度在0.1sec到0.9sec(得出结论时间)之间波动。<br>   RA是一个取值1到10的整数参数，不同的值代表使用不同的算法。<br></label><br><h3 id="四-程序内接口"><a href="#四-程序内接口" class="headerlink" title="四. 程序内接口"></a>四. 程序内接口</h3><br><label style="color:darkblue;">   这个有需要就搞，没需要就不弄了，不管是学术层面还是应用层面意义都不大。</label><br><h3 id="五-程序的使用"><a href="#五-程序的使用" class="headerlink" title="五. 程序的使用"></a>五. 程序的使用</h3><h4 id="hypergraph-file"><a href="#hypergraph-file" class="headerlink" title="hypergraph-file"></a>hypergraph-file</h4><br><label style="color:darkblue;">   直接上例子（111.u）：<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><br>1 8 9 28 3<br>10 8 6 3 5 2<br>15 4 5 1 7<br>13 4 2 5 7<br>18 4 7<br>25 3 5<br>20 8 2 4<br>14 6 5 2<br>27 5 7 2<br>29 8 4<br>80 85 30 55 42 39 90 102<br></code></pre></div></td></tr></table></figure><br><br><label style="color:darkblue;">   解释：<br>   --第一行是五个参数，分别代表<br>   1>索引基值（就是图的顶点是从0开始算的还是从1开始算的）;<br>   2>图的顶点数;<br>   3>net的个数;<br>   4>各个net包含的顶点数的和；<br>   5>"3"代表“有点权和net权”,我们基本上就用3，还有1，2分别代标只有net权和只有点权；<br>   --第二行开始一共是接着的N(net)行。<br>   每一行第一个数子代表net的权值，后面的代表这个net包含哪些点<br>   --第N(net)+2行则是N(V)个数字，代表每个点的点权<br><h4 id="使用patoh求解"><a href="#使用patoh求解" class="headerlink" title="使用patoh求解"></a>使用patoh求解</h4><br><label style="color:darkblue;">   调用方法如下：<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&gt;patoh &lt;hypergraph-file&gt; &lt;number-of-parts&gt; parameter<br></code></pre></div></td></tr></table></figure><br><label style="color:darkblue;">   例如执行如下代码：（其中111.u就是上面hypergraph-file的那个例子）<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&gt;patoh 111.u 5  RA=3 IB=0.5<br></code></pre></div></td></tr></table></figure><br><label style="color:darkblue;">   得到结果：</label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">+++++++++++++++++++++++++++++++++++++++++++++++++++++++<br>+++ PaToH v3.3 (c) Nov 1999-, by  Umit V. Catalyurek<br>+++ Build Date: Wed Jul 15 00:24:52 2020 -0400<br>+++++++++++++++++++++++++++++++++++++++++++++++++++++++<br><br>********************************************************************************<br>Hypergraph : 111.u   <span class="hljs-comment">#Cells :     8   #Nets :     9   #Pins :    28</span><br>********************************************************************************<br> 5-way partitioning results of PaToH:<br><br> <span class="hljs-string">'Con - 1'</span> Cost:   204<br> Part Weights   : Min=         69 (0.340) Max=        157 (0.501)<br>---- BALANCE IS NOT TIGHT ENOUGH ----<br>--------------------------------------------------------------------------------<br>I/O          :       0.000 sec<br>I.Perm/Cons.H:       0.000 sec  ( 0.4%)<br>Coarsening   :       0.000 sec  ( 0.3%)<br>Partitioning :       0.001 sec  (85.1%)<br>Uncoarsening :       0.000 sec  ( 8.4%)<br>Total        :       0.001 sec<br>Total (w I/O):       0.001 sec<br>--------------------------------------------------------------------------------<br></code></pre></div></td></tr></table></figure><br><label style="color:darkblue;">   中间“Cost”就是求出的花费<br>   下方的Total是使用的时间<br>   I/O代表输入输出使用的时间<br>   同时会生成一个文件，里面有N(V)个数字来表示一个图的划分<br>   这里还是提一下参数问题，比如RA(表示使用的递归方法)不同的数字还是会导致不同的求解时间<br></label><br>-<br>-<br>-<br>-<br>-<br>-<br><script src="https://utteranc.es/client.js" repo="lostedsailor/comment-utterance" issue-term="pathname" theme="github-light" crossorigin="anonymous" async></script></label></label></label></label>]]></content>
    
    
    
    <tags>
      
      <tag>patoh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ipet</title>
    <link href="/2020/03/22/ProgrammingLanguage/ipet/"/>
    <url>/2020/03/22/ProgrammingLanguage/ipet/</url>
    
    <content type="html"><![CDATA[<h2 id="ipet安装部署和使用"><a href="#ipet安装部署和使用" class="headerlink" title=" ipet安装部署和使用"></a><label style="color:blue"> ipet安装部署和使用</label></h2><a id="more"></a><label style="color:brown;font-size:20px;"><s>ipet 到底是个什么东西目前我真不球知道 </s><br>ipet应该会根据代码直接生成文档，并且以html的形式存起来，具体操作方法会在后面的ipet使用板块介绍。</label><h2 id="gt-gt-gt-gt-ipet的安装和部署"><a href="#gt-gt-gt-gt-ipet的安装和部署" class="headerlink" title="&gt;&gt;&gt;&gt;ipet的安装和部署"></a>&gt;&gt;&gt;&gt;ipet的安装和部署</h2><h3 id="gt-gt-gt-准备工作"><a href="#gt-gt-gt-准备工作" class="headerlink" title="&gt;&gt;&gt;准备工作"></a>&gt;&gt;&gt;准备工作</h3><label style="color:purple">按照ipet作者写的Readme，显然ipet的运行需要配置virtualenv和pyqt4两个东西。</label><h4 id="gt-gt-virtualenv的部署"><a href="#gt-gt-virtualenv的部署" class="headerlink" title="&gt;&gt;virtualenv的部署"></a>&gt;&gt;virtualenv的部署</h4><label style="color:purple">这东西的部署要求python3.5及之后的版本，所以为了部署它我们通常面临一波python3的版本更新。(更新python3向来是一个繁琐的过程)<br>python3版本完成后，只需要执行以下命令即可。<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo pip3 install virtualenv virtualenvwrapper<br></code></pre></div></td></tr></table></figure></label><label style="color:brown;font-size:20px;">在攻克下面一系列的问题之后，执行上述命令，并且显示了successfully。 <br>在命令“virtualenv --version” 输入并回车之后，成功显示了版本，我哭了。<br>当然这仅仅是IPET的开始。<br></label><h5 id="gt-常见问题"><a href="#gt-常见问题" class="headerlink" title="&gt;常见问题"></a>&gt;常见问题</h5><p><label style="color:red">这里列出部署virtualenv的时候会碰到的一些错误</label></p><p><label style="color:red">1.不能锁定配置文件 /usr/local/etc/gitconfig </label></p><label style="color:green">这个要问题花了我很多时间，找了很多方法都没用。<br>最后解决的办法是直接把这个usr里的etc目录创建下来，并且在里面执行git init 初始化即可<br>我的ubuntu会自带这个目录，服务器没有我估计是某大佬在秀操作吧，别这样，小弟们遭不住啊啊<br> </label><p><label style="color:red">2.python3的默认版本问题</label></p><label style="color:green">环境PATH变量的值直接影响我们快捷使用软件的指令<br>当PATH包含的两个不同目录同时含有一个同名链接的时候，那么输入这个链接名称到底会执行哪一个？<br>这个问题对于usr/bin和usr/local/bin而言，系统会优先执行后者<br>此次问的我的解决方案是直接变更usr/local/bin目录下的 python3链接即可<br>额外科普以下，后面这个bin和前面这个bin作用基本相同，但是前面的bin更加偏向系统或者程序自动加载的环境变量<br>因此当用户要进行自己的更改的时候，尽量去更改uer/local/bin下的东西，不要习惯性的往uer/bin目录下添加链接文件<br>显然这样一个习惯会加快环境变量全局访问速度<br></label><p><label style="color:red">3.pip3版本回退问题</label></p><label style="color:green">首先说一下碰到这个问题的原因。<br>一开始，由于服务器pyhon3的版本是3.4以下的。virtualenv明确要求python3.5之后的版本,我直接就下载并安装了python3.7以及对应版本的pip3<br>然而不论是清华软件源还是国外软件源都没有与3.7相应的virtualenv版本，所以我只能进行一波版本回退<br>接下来说回退方案：<br>我采用的方案是首先将usr/local/bin中的python3链接文件链接至python3.5<br>接着直接删除pip3，而后通过如下代码，来重新安装pip3。通过--version命令确认版本回退成功<br><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt install python3-pip<br></code></pre></div></td></tr></table></figure></label><p><label style="color:red">4. Cannot uninstall ‘six’………. </label></p><label style="color:green">six是python的一个模块，查一下six的资料颇有几分历史趣味<br>这个报错是因为six的版本过低，但是自动更新有无法更新。<br>网上搜的解决方案基本都是利用pip强制更新six但是都无法成功<br>分析原因，应该是我们服务器pip的源不是很好。这个回头肯定有大佬修改。我暂时不轻举妄动。<br>我的解决方案:<br>直接用pip3的源。执行如下代码即可。<br><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo pip3 install six --upgrade --ignore-installed six<br></code></pre></div></td></tr></table></figure></label><h4 id="gt-gt-pyqt4的部署"><a href="#gt-gt-pyqt4的部署" class="headerlink" title="&gt;&gt;pyqt4的部署"></a>&gt;&gt;pyqt4的部署</h4><label style="color:purple"><p>相对于virtualenv的部署，这个就相对容易的多，如下代码走一遍基本上就装好了。<br><br>如果报错，优先考虑安装源更新问题，利用“apt-get update”命令即可<br></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install libxext6 libxext-dev libqt4-dev libqt4-gui libqt4-sql<br>sudo apt-get install qt4-dev-tools qt4-doc qt4-qtconfig qt4-demos qt4-designer<br>sudo apt-get install python-qt4<br>sudo apt-get install python-qt4-*<br>sudo apt-get install python-qscintilla2<br><br>sudo apt-get install python3-pyqt4<br>sudo apt-get install python3-pyqt4.qsci<br>sudo apt-get install python3-pyqt4.qtsql<br>sudo apt-get install python3-pyqt4.phonon<br></code></pre></div></td></tr></table></figure></label><h5 id="gt-常见问题-1"><a href="#gt-常见问题-1" class="headerlink" title="&gt;常见问题"></a>&gt;常见问题</h5><p><label style="color:brown;font-size:15px;">相对于virtuallenv的问题，pyqt4的问题看似简单许多。但是会有很多奇葩问题并且也不容易解决。比如ipet存在内置调用是从python3的pyqt4导入QtCore，然而python2很容易安装了pyqt4以及相关的包，但python3却死活没法成功安装。python2和3的兼容问题饱受诟病，几乎所有用户都要同时具备python2和3。 </label></p><p><label style="color:red">1.cannot import name “QtCore”</label></p><label style="color:green">    成功配置好PyQt4之后，无论是进入python2还是3，通过import PyQt4 可以验证PyQt4已经部署成功。<br>    但是python2的PyQt4里面包含所需要的QtCore等，但是python3里面包含的PyQt4确不具备所需要的模块。<br>    网上也没有一个很好的解决方案，看来可行的解决方案是直接下载PyQt4的野包进行安装，而不用官网的<br>    对于这个问题的，我的解决方案是：<br>    束手无策之际，我回头看IPET的readme，没想到作者应该是意识到了这个问题，直接就提供了python3的PyQt4的安装脚本（install-pyqt4-in-virtual-environment.sh）。<br>    这个脚本是直接在python的虚拟环境“venv”中安装PyQt4!。我说为什么要人上去费事配置virtualenv。（具体操作会在后面ipet使用详细说明）<br>    那么研究至此，准备工作应该告一段落。</label><h2 id="gt-gt-gt-gt-ipet的使用"><a href="#gt-gt-gt-gt-ipet的使用" class="headerlink" title="&gt;&gt;&gt;&gt;ipet的使用"></a>&gt;&gt;&gt;&gt;ipet的使用</h2><h3 id="gt-gt-gt-概述"><a href="#gt-gt-gt-概述" class="headerlink" title="&gt;&gt;&gt;概述"></a>&gt;&gt;&gt;概述</h3><label style="color:red;font-size:15px;">首次创建虚拟环境时候的配置性操作由棕色字体给出，也就是说，第二次使用的时候无需进行配置。<br><br></label><label style="color:purple">==>>ipet是由python完成的程序，因此ipet的运行需要对应的python环境，这也是部署virtualenv的原因。<br>执行如下代码创建名为venv的虚拟环境并且进入venv环境模式：<br></label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ipet<br>virtualenv --python python3 venv<br><span class="hljs-built_in">source</span> venv/bin/activate<br></code></pre></div></td></tr></table></figure><br><label style="color:purple">==>>可以利用以下代码退出python虚拟环境模式：</label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">deactivate<br></code></pre></div></td></tr></table></figure><br><label style="color:brown">==>>首次创建新的虚拟环境的时候，需要部署ipet要求的pyqt4，执行以下代码即可：</label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">./install-pyqt4-in-virtual-environment.sh<br></code></pre></div></td></tr></table></figure><br><label style="color:brown">==>>执行以下代码，来完成需要的部署<br>（注意，在这期间可能会出现找不到安装包，版本错误之类的fatal错误信息。<br>这时候可采取单独安装相应的包的方案，或者指定给pip好用的下载源，或者其他的方案，<br>总之这里的问题一般是一些python配置的时候会出现的常见的问题）<br></label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install .<br></code></pre></div></td></tr></table></figure><br><label style="color:brown">==>>作者的README里说，对于以上命令，如果你是开发者，利用下面的命令替代可能会更好<br>好在哪里目前不清楚，以后开发的时候可能会用到，这里也贴下来<br></label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install -e .<br></code></pre></div></td></tr></table></figure><br><label style="color:brown">==>>通过以下代码来测试ipet是否部署成功：<br>(这里相当于执行以下c++的make test，目前我已经部署成功，返回“OK”则表明测试通过，部署成功)<br></label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">python -m unittest <span class="hljs-built_in">test</span><br></code></pre></div></td></tr></table></figure><br><label style="color:red;font-size:15px;">讨论至此，IPET的部署已经告一段落，接下来便是应用到相应的程序上。<br></label><h3 id="gt-gt-gt-具体应用到程序上"><a href="#gt-gt-gt-具体应用到程序上" class="headerlink" title="&gt;&gt;&gt;具体应用到程序上"></a>&gt;&gt;&gt;具体应用到程序上</h3><label style="color:red;font-size:15px;">执行以下代码，来开启ipet使用的探索之旅：<br></label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install sphinx<br><span class="hljs-built_in">cd</span> doc<br>make html<br></code></pre></div></td></tr></table></figure><br><h2 id="gt-gt-gt-gt-往后待续"><a href="#gt-gt-gt-gt-往后待续" class="headerlink" title="&gt;&gt;&gt;&gt;往后待续"></a>&gt;&gt;&gt;&gt;往后待续</h2>]]></content>
    
    
    
    <tags>
      
      <tag>ProgrammingLanguage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python语言教程</title>
    <link href="/2020/01/14/ProgrammingLanguage/python%E6%95%99%E7%A8%8B/"/>
    <url>/2020/01/14/ProgrammingLanguage/python%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="之前断续会看一点python，这次简单的走一遍语法，教程尽量干净简练"><a href="#之前断续会看一点python，这次简单的走一遍语法，教程尽量干净简练" class="headerlink" title="之前断续会看一点python，这次简单的走一遍语法，教程尽量干净简练"></a><label style="color:blue">之前断续会看一点python，这次简单的走一遍语法，教程尽量干净简练</label></h2><a id="more"></a><h3 id="gt-gt-gt-首先需要注意的大致有两点："><a href="#gt-gt-gt-首先需要注意的大致有两点：" class="headerlink" title="&gt;&gt;&gt;  首先需要注意的大致有两点："></a>&gt;&gt;&gt;  首先需要注意的大致有两点：</h3><h5 id="第一是python中空格地位非常高，所以不能随便敲空格或者tab"><a href="#第一是python中空格地位非常高，所以不能随便敲空格或者tab" class="headerlink" title="第一是python中空格地位非常高，所以不能随便敲空格或者tab"></a>第一是python中空格地位非常高，所以不能随便敲空格或者tab</h5><h5 id="第二是python代码中的函数声明，与python中类中的函数声明语法区别很大，注意区分"><a href="#第二是python代码中的函数声明，与python中类中的函数声明语法区别很大，注意区分" class="headerlink" title="第二是python代码中的函数声明，与python中类中的函数声明语法区别很大，注意区分"></a>第二是python代码中的函数声明，与python中类中的函数声明语法区别很大，注意区分</h5><h3 id="gt-gt-gt-示例代码一："><a href="#gt-gt-gt-示例代码一：" class="headerlink" title="&gt;&gt;&gt;  示例代码一："></a>&gt;&gt;&gt;  示例代码一：</h3><p><label style="color:green">定义了两个类，以及调用他们的样本代码</label></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">class Man:<br>num1=3<br>num2=4 <span class="hljs-comment">#也就是说python中类里面的变量可以这样直接声明，也可以像声明name一样在函数里面通过self的方式来声明</span><br>def __init__(self,name):<br>self.name = name<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"initialized!"</span>)<br><br>def hello(self):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"hello "</span>+self.name)<br><span class="hljs-built_in">print</span>(self.num1)<br><span class="hljs-built_in">print</span>(self.num2)<br><br>def goodbye(self):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"goodbye "</span>+self.name)<br><br>class Cat:<br>mm=Man(<span class="hljs-string">"dog"</span>)<br>def __init__(self,name):<br>self.name = name<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"initialized!"</span>)<br><br>def hello(self):<br><span class="hljs-built_in">print</span>(self.mm.name+<span class="hljs-string">" and "</span>+self.name+<span class="hljs-string">"==hello=="</span>)<br><br>def goodbye(self):<br><span class="hljs-built_in">print</span>(self.mm.name+<span class="hljs-string">" and "</span>+self.name+<span class="hljs-string">"==goodbye=="</span>)<br><br><br><br>m = Man(<span class="hljs-string">"mamama"</span>)<br>m.hello()<br>m.goodbye()<br><br>m2=Cat(<span class="hljs-string">"jam"</span>)<br>m2.hello()<br>m2.goodbye()<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-示例代码二："><a href="#gt-gt-gt-示例代码二：" class="headerlink" title="&gt;&gt;&gt;  示例代码二："></a>&gt;&gt;&gt;  示例代码二：</h3><p><label style="color:green">这部分是用python画sin的函数图像，import两个，其中注释的代码，最后一个plt.show()是有图形界面的时候运行时候会弹出图片，另外两个注释中，Agg是默认，所以注释要不要都行，但是可能某些时候会需要用到另外一种，就得mpl.use一下了，具体啥意思我目前也不清楚，有机会需要的时候在深入研究一下</label></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">import numpy as np<br><span class="hljs-comment">#import matplotlib as mpl</span><br><span class="hljs-comment">#mpl.use('Agg')</span><br>import matplotlib.pyplot as plt<br><br>x = np.arange(0,6,0.1)<br>y = np.sin(x)<br><br>plt.plot(x,y)<br><span class="hljs-comment">#plt.show()</span><br>plt.savefig(<span class="hljs-string">'./kkk.png'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"sdfsdfsd"</span>)<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-hexo流程操作"><a href="#gt-gt-gt-hexo流程操作" class="headerlink" title="&gt;&gt;&gt;  hexo流程操作"></a>&gt;&gt;&gt;  hexo流程操作</h3><p><label style="color:lightyellow">常规的话，hexo generate生成本地文件<br><br>接着hexo deploy 或者 hexo d上传到github部署即可完成<br><br>中间可以多以不hexo S本地预览一下</label></p><br><p><label style="color:lightyellow">服务端直接把博客文件xxxx.io克隆下来，当github端博客更新的时候，服务端直接git pull可以完成镜像更新。git pull 相当于 git fetch 和 git merge 的组合<br><br>换电脑出问题的话目前碰到两种可能，一种是github的问题（右上角头像–&gt;  setting –&gt; Developer settings –&gt; Personal access tokens）这个PAT得搞一下，而且有时间限制，时间到了就得建立新的，所以这个问题总能碰到。<br><br>还有个是sshkey的问题，本地电脑的sshkey旧了，删掉就行了，具体见谷歌收藏的网页<br><br>中间可以多以不hexo S本地预览一下</label><br><br></p>]]></content>
    
    
    
    <tags>
      
      <tag>ProgrammingLanguage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>规划问题建模方法</title>
    <link href="/2019/07/12/strategy/%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95/"/>
    <url>/2019/07/12/strategy/%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="应学姐需求，出一篇规划问题建模方法的攻略文章，我估计将来也有一帮人问我咋建模。早点把这个文章写了早点了事也不错"><a href="#应学姐需求，出一篇规划问题建模方法的攻略文章，我估计将来也有一帮人问我咋建模。早点把这个文章写了早点了事也不错" class="headerlink" title="应学姐需求，出一篇规划问题建模方法的攻略文章，我估计将来也有一帮人问我咋建模。早点把这个文章写了早点了事也不错"></a><label style="color:yellow">应学姐需求，出一篇规划问题建模方法的攻略文章，我估计将来也有一帮人问我咋建模。早点把这个文章写了早点了事也不错</label></h2><a id="more"></a><h2 id="规划问题建模一般要用到两个工具，awk和zimpl。"><a href="#规划问题建模一般要用到两个工具，awk和zimpl。" class="headerlink" title="规划问题建模一般要用到两个工具，awk和zimpl。"></a><label style="color:blue">规划问题建模一般要用到两个工具，awk和zimpl。<br></label></h2><h3 id="其中awk的作用是dui提供的数据进行切割或者说规范化，从而方便模型读入。而zimpl的作用是把zpl文件转化为lp文件"><a href="#其中awk的作用是dui提供的数据进行切割或者说规范化，从而方便模型读入。而zimpl的作用是把zpl文件转化为lp文件" class="headerlink" title="其中awk的作用是dui提供的数据进行切割或者说规范化，从而方便模型读入。而zimpl的作用是把zpl文件转化为lp文件"></a><label style="color:purple">其中awk的作用是dui提供的数据进行切割或者说规范化，从而方便模型读入。<br>而zimpl的作用是把zpl文件转化为lp文件</label></h3><hr><h2 id="也就是说要把一个问题建立为一个mps或者lp文件。说白了就是编写一个zpl文件。（如何编写zpl文件见本博客博文ZimpleDocumentary学习笔录）"><a href="#也就是说要把一个问题建立为一个mps或者lp文件。说白了就是编写一个zpl文件。（如何编写zpl文件见本博客博文ZimpleDocumentary学习笔录）" class="headerlink" title="也就是说要把一个问题建立为一个mps或者lp文件。说白了就是编写一个zpl文件。（如何编写zpl文件见本博客博文ZimpleDocumentary学习笔录）"></a><label style="color:blue">也就是说要把一个问题建立为一个mps或者lp文件。说白了就是编写一个zpl文件。（如何编写zpl文件见本博客博文<a href="https://lostedsailor.github.io/2019/06/24/ProgrammingLanguage/ZimpleDocumentary%E5%AD%A6%E4%B9%A0%E7%AC%94%E5%BD%95/#more" target="_blank" rel="noopener">ZimpleDocumentary学习笔录</a>）<br></label></h2><h3 id="然后再利用命令“zimpl-filename-zpl”生成lp文件。如果你的求解器能够读取并求解lp文件，那么建模到此结束但是有的求解器只支持mps文件，那么我们需要多一步把lp文件转化为mps文件转化方法是：利用scip。在下载安装完成scip之后，执行如下命令即可（注意直接照搬命令，我换行你就跟着敲回车即可）：scip-read-XXX-lp-presolve-write-transproblem-XXX-mps-至此建模完成。"><a href="#然后再利用命令“zimpl-filename-zpl”生成lp文件。如果你的求解器能够读取并求解lp文件，那么建模到此结束但是有的求解器只支持mps文件，那么我们需要多一步把lp文件转化为mps文件转化方法是：利用scip。在下载安装完成scip之后，执行如下命令即可（注意直接照搬命令，我换行你就跟着敲回车即可）：scip-read-XXX-lp-presolve-write-transproblem-XXX-mps-至此建模完成。" class="headerlink" title="然后再利用命令“zimpl filename.zpl”生成lp文件。如果你的求解器能够读取并求解lp文件，那么建模到此结束但是有的求解器只支持mps文件，那么我们需要多一步把lp文件转化为mps文件转化方法是：利用scip。在下载安装完成scip之后，执行如下命令即可（注意直接照搬命令，我换行你就跟着敲回车即可）：scip read XXX.lp presolve write transproblem XXX.mps 至此建模完成。"></a><label style="color:purple">然后再利用命令“zimpl filename.zpl”生成lp文件。<br>如果你的求解器能够读取并求解lp文件，那么建模到此结束<br>但是有的求解器只支持mps文件，那么我们需要多一步把lp文件转化为mps文件<br>转化方法是：利用scip。<br>在下载安装完成scip之后，执行如下命令即可（注意直接照搬命令，我换行你就跟着敲回车即可）：<br>scip <br>read <br>XXX.lp <br>presolve <br>write <br>transproblem <br>XXX.mps <br>至此建模完成。<br></label></h3>]]></content>
    
    
    
    <tags>
      
      <tag>strategy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言教程</title>
    <link href="/2019/07/12/ProgrammingLanguage/c%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/"/>
    <url>/2019/07/12/ProgrammingLanguage/c%E8%AF%AD%E8%A8%80%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="面向过程的c语言的一些常用教程"><a href="#面向过程的c语言的一些常用教程" class="headerlink" title="面向过程的c语言的一些常用教程"></a><label style="color:blue">面向过程的c语言的一些常用教程</label></h2><a id="more"></a><h3 id="gt-gt-gt-文件读写入"><a href="#gt-gt-gt-文件读写入" class="headerlink" title="&gt;&gt;&gt; 文件读写入"></a>&gt;&gt;&gt; 文件读写入</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#include&lt;stdlib.h&gt;</span><br>int <span class="hljs-function"><span class="hljs-title">main</span></span>()<br>&#123;<br>int a=2;<br>FILE *X;<br>X = fopen(<span class="hljs-string">"filename"</span>,<span class="hljs-string">"w"</span>);<br>fprintf(X,<span class="hljs-string">"sfdfafwae%d"</span>,a);<br>fclose(X);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ProgrammingLanguage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>makefile教程</title>
    <link href="/2019/07/08/ProgrammingLanguage/makefile%E6%95%99%E7%A8%8B/"/>
    <url>/2019/07/08/ProgrammingLanguage/makefile%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="makefile用于linux构建大型工程"><a href="#makefile用于linux构建大型工程" class="headerlink" title="makefile用于linux构建大型工程"></a><label style="color:blue">makefile用于linux构建大型工程</label></h2><a id="more"></a><h2 id="学习makefile的动机在于想学习cmake，所以来一个先修课程"><a href="#学习makefile的动机在于想学习cmake，所以来一个先修课程" class="headerlink" title="学习makefile的动机在于想学习cmake，所以来一个先修课程"></a><label style="color:red">学习makefile的动机在于想学习cmake，所以来一个先修课程</label></h2><h3 id="gt-gt-gt-不多说，w3school的教程非常棒，下面直接保存个链接"><a href="#gt-gt-gt-不多说，w3school的教程非常棒，下面直接保存个链接" class="headerlink" title="&gt;&gt;&gt;不多说，w3school的教程非常棒，下面直接保存个链接"></a>&gt;&gt;&gt;不多说，w3school的教程非常棒，下面直接保存个链接</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">https://www.w3cschool.cn/mexvtg/adisqozt.html<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ProgrammingLanguage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zpl模板</title>
    <link href="/2019/06/26/muban/Zpl%E6%A8%A1%E6%9D%BF/"/>
    <url>/2019/06/26/muban/Zpl%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="Zpl模板"><a href="#Zpl模板" class="headerlink" title="Zpl模板"></a><label style="color:blue">Zpl模板</label></h2><a id="more"></a><h2 id="自己用的模板"><a href="#自己用的模板" class="headerlink" title="自己用的模板"></a><label style="color:red">自己用的模板</label></h2><h3 id="gt-gt-gt-problem2-zpl"><a href="#gt-gt-gt-problem2-zpl" class="headerlink" title="&gt;&gt;&gt; problem2.zpl"></a>&gt;&gt;&gt; problem2.zpl</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#</span><br><span class="hljs-comment">#设定关键参数</span><br>param lgm := 13;<br>param yipusen_1 := 99750.0;<br>param yipusen_2 := 40500.0;<br>param xigema := 67547.87188810669;<br>param ccccc :=240.0;<br><br><span class="hljs-comment"># Xnum 用于标识x的变量个数，在这个问题里有300个x，下标从0开始算</span><br>param Xnum:=300;<br><span class="hljs-built_in">set</span> Ix := &#123;0 .. (Xnum-1)&#125;;<br>var x[Ix] binary;<br><br><span class="hljs-comment">#Ynum 用于标识y的变量个数，在这个问题里有897个y，下标从0开始</span><br>param Ynum := 897;<br><span class="hljs-built_in">set</span> Iy :=&#123;0 .. (Ynum-1)&#125;;<br>var y[Iy] binary;<br><br><span class="hljs-comment">#Znum 用于标识z的变量个数，在这个问题里有150000个z，下标从零开始</span><br>param Znum :=150000;<br><span class="hljs-built_in">set</span> Iz := &#123;0 .. (Znum -1)&#125;;<br>var z[Iz] binary;<br><br><br>param Ci[Ix] := <span class="hljs-built_in">read</span> <span class="hljs-string">"X@i_ci"</span> as <span class="hljs-string">"&lt;1n&gt; 2n"</span>;<br><span class="hljs-built_in">set</span> x_yy := &#123;<span class="hljs-built_in">read</span> <span class="hljs-string">"X@x-~y"</span> as <span class="hljs-string">"&lt;1n,2n&gt;"</span>&#125;;<br><br><span class="hljs-built_in">set</span> y_zz := &#123;<span class="hljs-built_in">read</span> <span class="hljs-string">"Y@y-~z"</span> as <span class="hljs-string">"&lt;1n,2n&gt;"</span>&#125;;<br><span class="hljs-built_in">set</span> z_all := &#123;<span class="hljs-built_in">read</span> <span class="hljs-string">"Zall"</span> as <span class="hljs-string">"&lt;1n,2n,3n,4n&gt;"</span>&#125;;<br><br><span class="hljs-built_in">set</span> x_x := &#123; <span class="hljs-built_in">read</span> <span class="hljs-string">"XrelateX"</span> as <span class="hljs-string">"&lt;1n,2n&gt;"</span>&#125;;<br><span class="hljs-built_in">set</span> y_y := &#123; <span class="hljs-built_in">read</span> <span class="hljs-string">"YrelateY"</span> as <span class="hljs-string">"&lt;1n,2n&gt;"</span>&#125;;<br><br><br>maximize Answer : sum &lt;i,j,k,l&gt; <span class="hljs-keyword">in</span> z_all : z[i]*l ;<br><br>subto YY_Z: forall &lt;k&gt; <span class="hljs-keyword">in</span> Iz <span class="hljs-keyword">do</span><br>sum &lt;j,k&gt; <span class="hljs-keyword">in</span> y_zz:y[j] &gt;= z[k];<br><br>subto Y_XX: forall &lt;j&gt; <span class="hljs-keyword">in</span> Iy <span class="hljs-keyword">do</span><br>sum &lt;i,j&gt; <span class="hljs-keyword">in</span> x_yy:x[i] &gt;= y[j];<br><br>subto X_1: <br>sum &lt;i&gt; <span class="hljs-keyword">in</span> Ix: x[i]*Ci[i] &lt;=ccccc;<br><br>subto X_relate_X:forall &lt;i,j&gt; <span class="hljs-keyword">in</span> x_x <span class="hljs-keyword">do</span><br>x[i]+x[j]&lt;=1;<br>subto Y_relate_Y:forall &lt;i,j&gt; <span class="hljs-keyword">in</span> y_y <span class="hljs-keyword">do</span><br>y[i]+y[j]&lt;=1;<br><br>subto Z_all_1:<br>sum &lt;k,0,m,n&gt; <span class="hljs-keyword">in</span> z_all:z[k]*m &gt;= yipusen_1;<br>subto Z_all_2:<br>sum &lt;k,1,m,n&gt; <span class="hljs-keyword">in</span> z_all:z[k]*m &gt;= yipusen_2;<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-LSimplifyProblem1-zpl-加限制条件"><a href="#gt-gt-gt-LSimplifyProblem1-zpl-加限制条件" class="headerlink" title="&gt;&gt;&gt;LSimplifyProblem1.zpl(加限制条件)"></a>&gt;&gt;&gt;LSimplifyProblem1.zpl(加限制条件)</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#设定简化问题参数</span><br><span class="hljs-comment">#</span><br><span class="hljs-built_in">set</span> xyznum := &#123;<span class="hljs-built_in">read</span> <span class="hljs-string">"xyznumber"</span> as <span class="hljs-string">"&lt;1n,2n,3n&gt;"</span>&#125;;<br><br>param Sx := sum &lt;i,j,k&gt; <span class="hljs-keyword">in</span> xyznum : i;<br>param Sy := sum &lt;i,j,k&gt; <span class="hljs-keyword">in</span> xyznum : j;<br>param Sz := sum &lt;i,j,k&gt; <span class="hljs-keyword">in</span> xyznum : k;<br><br><span class="hljs-comment">#设定几个关键参数</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#</span><br>param lgm := 13;<br>param yipusen_1 := Sz/5;<br><span class="hljs-comment">#yipusen_1 原始值: 99750.0</span><br>param yipusen_2 := yipusen_1/2;<br><span class="hljs-comment">#yipusen_2 原始值：40500.0</span><br>param xigema := yipusen_2 - 150;<br><span class="hljs-comment">#xigema 原始值 67547.87188810669</span><br>param ccccc := 240.0;<br><span class="hljs-comment">#ccccc 原始值 240.0</span><br><br><br><span class="hljs-comment">#读入生成的随机xyz序列</span><br><span class="hljs-built_in">set</span> randX :=&#123;<span class="hljs-built_in">read</span> <span class="hljs-string">"randX"</span> as <span class="hljs-string">"&lt;1n&gt;"</span>&#125;;<br><span class="hljs-built_in">set</span> randY :=&#123;<span class="hljs-built_in">read</span> <span class="hljs-string">"randY"</span> as <span class="hljs-string">"&lt;1n&gt;"</span>&#125;;<br><span class="hljs-built_in">set</span> randZ :=&#123;<span class="hljs-built_in">read</span> <span class="hljs-string">"randZ"</span> as <span class="hljs-string">"&lt;1n&gt;"</span>&#125;;<br><br><span class="hljs-comment"># Xnum 用于标识x的变量个数，在这个问题里有300个x，下标从0开始算。</span><br>param Xnum :=300;<br><br><span class="hljs-built_in">set</span> Ix := &#123;0 .. (Xnum-1)&#125;;<br>var x[Ix] binary;<br><span class="hljs-built_in">set</span> Ci := &#123;<span class="hljs-built_in">read</span> <span class="hljs-string">"X@i_ci"</span> as <span class="hljs-string">"&lt;1n,2n&gt;"</span>&#125;;<br><span class="hljs-built_in">set</span> x_yy :=&#123; <span class="hljs-built_in">read</span> <span class="hljs-string">"X@x-~y"</span> as <span class="hljs-string">"&lt;1n,2n&gt;"</span> &#125;;<br><br><span class="hljs-comment">#Ynun 用于标识y的变量个数，在这个问题里有897个y，下标从0开始算。</span><br>param Ynum :=897;<br><span class="hljs-built_in">set</span> Iy := &#123;0 .. (Ynum-1)&#125;;<br>var y[Iy] binary;<br><br><span class="hljs-comment">#Znum 用于标识z的变量个数，在这个问题里有150000个z，下标从0开始算</span><br>param Znum :=150000;<br><span class="hljs-built_in">set</span> Iz := &#123;0 .. (Znum-1)&#125;;<br>var z[Iz] binary;<br><br><span class="hljs-built_in">set</span> y_zz := &#123; <span class="hljs-built_in">read</span> <span class="hljs-string">"Y@y-~z"</span> as <span class="hljs-string">"&lt;1n,2n&gt;"</span>&#125;;<br><span class="hljs-built_in">set</span> z_all := &#123; <span class="hljs-built_in">read</span> <span class="hljs-string">"Zall"</span> as <span class="hljs-string">"&lt;1n,2n,3n,4n&gt;"</span>&#125;;<br><br><span class="hljs-built_in">set</span> x_x := &#123; <span class="hljs-built_in">read</span> <span class="hljs-string">"XrelateX"</span> as <span class="hljs-string">"&lt;1n,2n&gt;"</span> &#125;;<br><span class="hljs-built_in">set</span> y_y := &#123; <span class="hljs-built_in">read</span> <span class="hljs-string">"YrelateY"</span> as <span class="hljs-string">"&lt;1n,2n&gt;"</span> &#125;;<br><br>minimize Answer: sum &lt;i&gt; <span class="hljs-keyword">in</span> Ix with &lt;i&gt; <span class="hljs-keyword">in</span> randX: sum &lt;i,j&gt; <span class="hljs-keyword">in</span> Ci:x[i]*j;<br><br>subto Y_XX: forall &lt;j&gt; <span class="hljs-keyword">in</span> Iy with &lt;j&gt; <span class="hljs-keyword">in</span> randY <span class="hljs-keyword">do</span><br>        sum &lt;i,j&gt; <span class="hljs-keyword">in</span> x_yy with &lt;i&gt; <span class="hljs-keyword">in</span> randX : x[i] &gt;= y[j]; <br><br>subto YY_Z: forall &lt;k&gt; <span class="hljs-keyword">in</span> Iz with &lt;k&gt; <span class="hljs-keyword">in</span> randZ <span class="hljs-keyword">do</span><br>sum &lt;j,k&gt; <span class="hljs-keyword">in</span> y_zz with &lt;j&gt; <span class="hljs-keyword">in</span> randY : y[j] &gt;= z[k];<br><br>subto Z_all_1:<br>sum &lt;k,0,m,n&gt; <span class="hljs-keyword">in</span> z_all with &lt;k&gt; <span class="hljs-keyword">in</span> randZ  <span class="hljs-keyword">do</span> z[k]*m &gt;= yipusen_1;<br> <br>subto Z_all_2:<br>sum &lt;k,1,m,n&gt; <span class="hljs-keyword">in</span> z_all with &lt;k&gt; <span class="hljs-keyword">in</span> randZ <span class="hljs-keyword">do</span> z[k]*m &gt;= yipusen_2;<br><br><br>subto Z_all_3:<br>        sum &lt;k,v,m,n&gt; <span class="hljs-keyword">in</span> z_all with &lt;k&gt; <span class="hljs-keyword">in</span> randZ <span class="hljs-keyword">do</span> z[k]*n &gt;= xigema;<br><br>subto X_relate_X:forall &lt;i,j&gt; <span class="hljs-keyword">in</span> x_x with &lt;i&gt; <span class="hljs-keyword">in</span> randX and &lt;j&gt; <span class="hljs-keyword">in</span> randY <span class="hljs-keyword">do</span><br>x[i]+x[j]&lt;=1;<br><br>subto Y_relate_Y:forall &lt;i,j&gt; <span class="hljs-keyword">in</span> y_y with &lt;i&gt; <span class="hljs-keyword">in</span> randX and &lt;j&gt; <span class="hljs-keyword">in</span> randY <span class="hljs-keyword">do</span><br>y[i]+y[j]&lt;=1;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>muban</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Awk模板</title>
    <link href="/2019/06/26/muban/Awk%E6%A8%A1%E6%9D%BF/"/>
    <url>/2019/06/26/muban/Awk%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="Awk模板"><a href="#Awk模板" class="headerlink" title="Awk模板"></a><label style="color:blue">Awk模板</label></h2><a id="more"></a><h2 id="自己用的模板"><a href="#自己用的模板" class="headerlink" title="自己用的模板"></a><label style="color:red">自己用的模板</label></h2><h3 id="gt-gt-gt-ppppppp-awk-注意最后别漏文件名"><a href="#gt-gt-gt-ppppppp-awk-注意最后别漏文件名" class="headerlink" title="&gt;&gt;&gt;ppppppp.awk(注意最后别漏文件名)"></a>&gt;&gt;&gt;ppppppp.awk(注意最后别漏文件名)</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">awk <span class="hljs-string">'&#123;<br>len = split($0 , table , ",");<br>if(table[1]!="j")<br>for(  i = 3 ; i &lt;= len ;i++)<br>&#123;<br>printf "%s %s\n",table[1],table[i];<br>&#125;<br>&#125;'</span> Y.csv<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-qqqqqqqqq-awk"><a href="#gt-gt-gt-qqqqqqqqq-awk" class="headerlink" title="&gt;&gt;&gt;qqqqqqqqq.awk"></a>&gt;&gt;&gt;qqqqqqqqq.awk</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">awk <span class="hljs-string">'&#123;<br>len = split($0 , table , ",");<br>if(table[1]!= "j")<br>for(i = 2; i &lt;= len ;i ++)<br>&#123;<br>printf "%s %s\n" ,table[1],table[i];<br>&#125;<br>&#125;'</span> YrelateY.csv<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>muban</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZimpleDocumentary学习笔录</title>
    <link href="/2019/06/24/ProgrammingLanguage/ZimpleDocumentary%E5%AD%A6%E4%B9%A0%E7%AC%94%E5%BD%95/"/>
    <url>/2019/06/24/ProgrammingLanguage/ZimpleDocumentary%E5%AD%A6%E4%B9%A0%E7%AC%94%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="这个东西是用于编写zpl的"><a href="#这个东西是用于编写zpl的" class="headerlink" title="这个东西是用于编写zpl的"></a><label style="color:yellow">这个东西是用于编写zpl的</label></h2><a id="more"></a><h4 id="没中文教程，这里做一个对英文教程学习的笔记-英文教程就是zimple官网提供的documentary。其中会用到awk来处理文件，awk是属于命令行级别的语言，语法和操作都非常简单，文中会介绍"><a href="#没中文教程，这里做一个对英文教程学习的笔记-英文教程就是zimple官网提供的documentary。其中会用到awk来处理文件，awk是属于命令行级别的语言，语法和操作都非常简单，文中会介绍" class="headerlink" title="没中文教程，这里做一个对英文教程学习的笔记,英文教程就是zimple官网提供的documentary。其中会用到awk来处理文件，awk是属于命令行级别的语言，语法和操作都非常简单，文中会介绍"></a><label style="color:red">没中文教程，这里做一个对英文教程学习的笔记,英文教程就是zimple官网提供的documentary。其中会用到awk来处理文件，awk是属于命令行级别的语言，语法和操作都非常简单，文中会介绍</label></h4><h2 id="gt-gt-gt-gt-简化教程"><a href="#gt-gt-gt-gt-简化教程" class="headerlink" title="&gt;&gt;&gt;&gt;简化教程"></a>&gt;&gt;&gt;&gt;简化教程</h2><p><label style="color:blue">这篇学习笔录本来是想写一篇同步官方documentary的中文同步教程。但是应学姐要求，我先出一篇简化教程，如果时间不多，仅仅看这个简化教程模块来建模一个规划问题模型是完全够用的。<br><br>为了更清楚的说明问题。我直接同步我的一个样例模板来讲解，请开一个新的浏览器窗口来打开我的博文（见本博客博文<a href="https://lostedsailor.github.io/2019/06/26/muban/Zpl%E6%A8%A1%E6%9D%BF/#more" target="_blank" rel="noopener">“Zpl模板”</a>），对照学习。<br><br></label></p><h3 id="gt-gt-gt-zpl文件元素"><a href="#gt-gt-gt-zpl文件元素" class="headerlink" title="&gt;&gt;&gt; zpl文件元素"></a>&gt;&gt;&gt; zpl文件元素</h3><label style="color:green">我们都知道，一个规划问题由变量，目标函数，约束，三大部分构成。那么zpl文件整个的目的就是描述清楚这三个东西。<br>官方通过“元组”为单元，再进一步构建集合，常数以及定值表来完成这个操作。其实为了建一个模型，完全不必要了解这么多这么详细的东西。我们只需要仅仅学习两个概念“集合”和“常数”即可。然后就是相关语法，相信读完此教程你会很容易的完成建模。</label><h4 id="gt-gt-常数"><a href="#gt-gt-常数" class="headerlink" title="&gt;&gt;常数"></a>&gt;&gt;常数</h4><label style="color:green">没啥说的，字面意思。或者在模型里有时候被叫做“参数”。<br>声明方法为，“param name := 521521”。<br>在模板“problem2.zpl”中有很多这样的定义，也很直观。<br></label><h4 id="gt-gt-集合"><a href="#gt-gt-集合" class="headerlink" title="&gt;&gt;集合"></a>&gt;&gt;集合</h4><label style="color:green">这部分用到了sum和forall语句，后面会讲，这里能理解大概是啥就行<br>对于zpl中集合的元素，我们可以理解为多维或者一维向量。一维向量主要是针对“一部分变量加和小于等于或者大于等于某值”这样的约束，来从变量中取“这么一部分”变量用的。<br>相应的高维元素，差不多也是这么一个感觉，只是多了一个相关元，这里我们一般用到二维的就够了(这里讲一个例子):<br>比如对于约束 “y[j] >= sum(x[i,j])”。<br>这个约束中对于一个j有多个i与之对应。<br>我们假设文件中的某一行是“3，2，3，4，7，9 ”.<br>代表 y[3] >= x[2] + x[3] + x[4] + x[7] + x[9] 这条约束<br>那么我们首先要把“3，2，3，4，7，9” 处理为（这个处理方法要用awk，方法详见本博客博文“<a href="https://lostedsailor.github.io/2019/06/24/ProgrammingLanguage/Awk%E6%95%99%E7%A8%8B/#more" target="_blank" rel="noopener">Awk教程</a>”）：<br>“<br>3,2<br>3,3<br>3,4<br>3,7<br>3,9<br>”<br>这样一个表。它相当于一个集合。集合中元素就是<3,2><3,3><3,4><3,7><3,9>这样的一个个二维数组<br>假设集合名字叫 sister。那么我们通过如下语句描述这条约束<br></3,9></3,7></3,4></3,3></3,2></label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">subto 约束name : sum &lt;i,j&gt; <span class="hljs-keyword">in</span> sister : x[i] &lt;= y[j]<br></code></pre></div></td></tr></table></figure><label style="color:green">problem2.zpl模板中也有很多这样的约束<br>=======<br>接着这个例子讲<br>如果有多个约束呢？比如我们的j要遍历到所有的y，对于每一个j都有一个对应于j的i的集合。<br>很简单，我们仿照上面那个表，相当于构建了如下一个表：<br>“<br>3,2<br>3,3<br>3,4<br>3,7<br>3,9<br>4,1<br>4,2<br>4,10<br>5,4<br>6,3<br>”<br>假设我们的集合Iy代表了y的所有元素<br>那么我们用如下语句描述这条约束：<br></label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">subto 约束name : forall &lt;j&gt; <span class="hljs-keyword">in</span> Iy <span class="hljs-keyword">do</span> <br>  sum &lt;i,j&gt; <span class="hljs-keyword">in</span> sister : x[i] &lt;= y[j]<br></code></pre></div></td></tr></table></figure><label style="color:green">problem2.zpl模板中也有很多这样的约束<br>那么j如果不是针对所有的y呢？很简单，我们的Iy集合只需要改为那个所要求的y的集合即可。<br></label><h3 id="gt-gt-gt-zpl文件语法"><a href="#gt-gt-gt-zpl文件语法" class="headerlink" title="&gt;&gt;&gt; zpl文件语法"></a>&gt;&gt;&gt; zpl文件语法</h3><h4 id="gt-gt-设置常数"><a href="#gt-gt-设置常数" class="headerlink" title="&gt;&gt;设置常数"></a>&gt;&gt;设置常数</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">param yipusen_1 := 99750.0;<br></code></pre></div></td></tr></table></figure><h4 id="gt-gt-设置集合"><a href="#gt-gt-设置集合" class="headerlink" title="&gt;&gt;设置集合"></a>&gt;&gt;设置集合</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> Ix := &#123;0 .. (Xnum-1)&#125;;<br>//这个代表从零到Xnum-1的所有整数，所构成的集合。这种集合一般是遍历变量所用的集合。<br><span class="hljs-built_in">set</span> x_yy := &#123;<span class="hljs-built_in">read</span> <span class="hljs-string">"X@x-~y"</span> as <span class="hljs-string">"&lt;1n,2n&gt;"</span>&#125;;<br>//这种相当于通过读文件的方法读集合。文件中每一行对应集合的一个元素。&lt;1n,2n&gt;代表文件中每一行读入第一列和第二列，并且视为数字。n代表number。1和2代表第一列第二列。<br><span class="hljs-built_in">set</span> x_yy := &#123;<span class="hljs-built_in">read</span> <span class="hljs-string">"X@x-~y"</span> as <span class="hljs-string">"&lt;1n,3n&gt;"</span>&#125;;<br>//同样上面的例子改了一点。代表读文件每一行的第一列和第三列。以数字的格式读入。这个集合元素也相当于一个个二元数组。由此看来zpl本身也自带那么一点文件处理能力的。<br></code></pre></div></td></tr></table></figure><h4 id="gt-gt-forall语句"><a href="#gt-gt-forall语句" class="headerlink" title="&gt;&gt;forall语句"></a>&gt;&gt;forall语句</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">//如果集合是元素是一维的那么如下<br>forall &lt;i&gt; <span class="hljs-keyword">in</span> 集合名 <span class="hljs-keyword">do</span><br>语句<br>//这样的语法，相当于对于这个集合中每一个元素，都执行语句。从而实现定义多个约束 。<br>//如果集合元素是高维<br>forall &lt;i,j,k&gt; <span class="hljs-keyword">in</span> 集合名 <span class="hljs-keyword">do</span><br>语句<br>//注意！！！！！其中i，j，k相当于声明变量了，语句中可以直接用。你也可以直接 forall &lt;3,j,k&gt; <span class="hljs-keyword">in</span> 集合名 <span class="hljs-keyword">do</span>。这样子，来抽取集合中所有第一个元素是3的。这个用法很关键。<br></code></pre></div></td></tr></table></figure><h4 id="gt-gt-sum-语句"><a href="#gt-gt-sum-语句" class="headerlink" title="&gt;&gt;sum 语句"></a>&gt;&gt;sum 语句</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sum &lt;j,k&gt; <span class="hljs-keyword">in</span> y_zz:y[j]<br>//代表y_zz中所有元素，y[j]相加<br>//也就是说sum语句不会像forall一样执行多次从而相当于生成多个约束或者多个语句。sum相当于我们数学中的连加符号。<br>//注意！！！！！！sum &lt;i&gt; <span class="hljs-keyword">in</span> Ix <span class="hljs-keyword">do</span>.这样也是可以的。也就是说sum语句最后<span class="hljs-keyword">do</span>或者冒号都可以。而forall只能是<span class="hljs-keyword">do</span>。<br></code></pre></div></td></tr></table></figure><h4 id="gt-gt-设置变量"><a href="#gt-gt-设置变量" class="headerlink" title="&gt;&gt;设置变量"></a>&gt;&gt;设置变量</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">var z[Iz] binary;<br>//代表变量z，Iz是个集合，它的声明见实例。binary代表z是一个0，1变量。学姐暂时只用到01，别的变量声明方法见documentary或者直接问我。<br></code></pre></div></td></tr></table></figure><h4 id="gt-gt-设置目标函数"><a href="#gt-gt-设置目标函数" class="headerlink" title="&gt;&gt;设置目标函数"></a>&gt;&gt;设置目标函数</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">模板中有两个。参考模板最大目标和最小目标都有。<br></code></pre></div></td></tr></table></figure><h4 id="gt-gt-设置约束"><a href="#gt-gt-设置约束" class="headerlink" title="&gt;&gt;设置约束"></a>&gt;&gt;设置约束</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">模板中subto开头的，非常直观，不再赘述。<br></code></pre></div></td></tr></table></figure><h4 id="gt-gt-with-语句"><a href="#gt-gt-with-语句" class="headerlink" title="&gt;&gt;with 语句"></a>&gt;&gt;with 语句</h4><label style="color:green">这东西相当于添加限制条件，从而不去对sum in 或者 forall in 的集合的所有元素都执行:<br></label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">可以是 with <span class="hljs-keyword">in</span> 集合名。通过一个集合来限制。<br>也可以 with <span class="hljs-keyword">in</span> 表达式。<br>比如 “ forall &lt;i&gt; <span class="hljs-keyword">in</span> Ix with i&lt;10 : ”<br>这样的语句来让forall只针对前10个i来进行处理。<br></code></pre></div></td></tr></table></figure><h2 id="gt-gt-gt-gt-同步教程"><a href="#gt-gt-gt-gt-同步教程" class="headerlink" title="&gt;&gt;&gt;&gt;同步教程"></a>&gt;&gt;&gt;&gt;同步教程</h2><label style="color:blue">这个有时间我写把，虽然我估计这事儿就扔这儿了，哈哈。</label>]]></content>
    
    
    
    <tags>
      
      <tag>ProgrammingLanguage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Awk教程</title>
    <link href="/2019/06/24/ProgrammingLanguage/Awk%E6%95%99%E7%A8%8B/"/>
    <url>/2019/06/24/ProgrammingLanguage/Awk%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Awk学习不定期更新"><a href="#Awk学习不定期更新" class="headerlink" title="Awk学习不定期更新"></a><label style="color:blue">Awk学习不定期更新</label></h2><a id="more"></a><h2 id="AWK是一个优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一。与grep和sed并称linux三剑客。同样的这里不进行系统学习，或者说进行一些非常基础的入门学习。系统学习在网上有很多很不错的学习网站。但是作为入门，从这里开始再合适不过了！"><a href="#AWK是一个优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一。与grep和sed并称linux三剑客。同样的这里不进行系统学习，或者说进行一些非常基础的入门学习。系统学习在网上有很多很不错的学习网站。但是作为入门，从这里开始再合适不过了！" class="headerlink" title="AWK是一个优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一。与grep和sed并称linux三剑客。同样的这里不进行系统学习，或者说进行一些非常基础的入门学习。系统学习在网上有很多很不错的学习网站。但是作为入门，从这里开始再合适不过了！"></a><label style="color:red">AWK是一个优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一。与grep和sed并称linux三剑客。同样的这里不进行系统学习，或者说进行一些非常基础的入门学习。系统学习在网上有很多很不错的学习网站。但是作为入门，从这里开始再合适不过了！</label></h2><h2 id="gt-gt-gt-gt-入门教程"><a href="#gt-gt-gt-gt-入门教程" class="headerlink" title="&gt;&gt;&gt;&gt;入门教程"></a>&gt;&gt;&gt;&gt;入门教程</h2><label style="color:purple">首先，和zimple一样，请开一个新的页面打开我的<a href="https://lostedsailor.github.io/2019/06/26/muban/Awk%E6%A8%A1%E6%9D%BF/#more" target="_blank" rel="noopener">awk模板</a>，我们对照模板开始讲解。<br>awk是命令语言，也就是说在bash（命令行）界面，基本上可以完成awk的所有操作。<br>但是考虑到代码的复用性，我们往往写成一个脚本。awk模板的前两个就是写了个脚本。然后执行。为了建模，我们其实了解目前模板内容足以。日后对于更加复杂点的模型需要更多的awk的处理方式，我将在下面“命令补充”板块补充awk的命令<br>接下来分几个子版块说明一下使用awk的原因以及语法<br></label><h3 id="gt-gt-gt-awk的任务"><a href="#gt-gt-gt-awk的任务" class="headerlink" title="&gt;&gt;&gt;awk的任务"></a>&gt;&gt;&gt;awk的任务</h3><label style="color:blue">在我们的zpl教程中，或者说zpl模板中，经常出现以下模式的语句：<br><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> z_all := &#123;<span class="hljs-built_in">read</span> <span class="hljs-string">"Zall"</span> as <span class="hljs-string">"&lt;1n,2n,3n,4n&gt;"</span>&#125;;<br><br>subto Z_all_1:<br>sum &lt;k,0,m,n&gt; <span class="hljs-keyword">in</span> z_all:z[k]*m &gt;= yipusen_1;<br><br>subto Z_all_2:<br>sum &lt;k,1,m,n&gt; <span class="hljs-keyword">in</span> z_all:z[k]*m &gt;= yipusen_2;<br></code></pre></div></td></tr></table></figure><p>这些语句的作用相信看过zpl教程的人都一定很明确。 <br><br>简单说一下就是Zall是一个四列的表。我们利用了文件读入的方式来定义 z_all 集合  <br><br>z_all集合的元素就是相当于一个个四维的向量或者叫元组 <br><br>然后利用z_all集合来定义几个约束 <br><br><br><br>那么明显，我们awk的使命就是做出Zall这个文件来让awk来读。因为模型给我们的文件往往不是很标准的四列的数据。<br><br>同时请注意，模型有时候会出现列数不确定的情况。比如第一列代表x的下标i。后面代表和x[i]相关的的y的下标j。不同的i对应的j的数量不确定<br><br>这种算一种典型的情况，在zpl教程中我们提到过。<br><br>比如模型如下：<br></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1 2 3 4 6<br>2 4 6 7 8 9<br>3 2 5<br></code></pre></div></td></tr></table></figure><p>代表的是，x[1] 分别和 y[2],y[3],y[4],y[6]相关<br><br>x[2] 分别和 y[4],y[6],y[7],y[8],y[9]相关<br><br>x[3] 分别和 y[2],y[5]相关<br><br><br><br>那么我们需要用awk把上面的模型处理成如下形式:<br></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1 2<br>1 3<br>1 4<br>1 6<br>2 4<br>2 6 <br>2 7 <br>2 8<br>2 9<br>3 2<br>3 5<br></code></pre></div></td></tr></table></figure><p>如此以来<br><br>我们就可以用forall语句或者sum语句来表达出任何形状的约束或者目标函数的表达式<br><br>这个例子说明了awk的使命，此外模型型除了上面的情况，往往第一行不是数据而是表头，让人们容易知道每一列是什么。<br><br>zpl读入则不需要这些表头，可以用zpl内置的语句忽略这一行。但是我们为了简便，往往利用awk把这行处理掉。<br><br></p></label><p></p><h3 id="gt-gt-gt-awk的语法"><a href="#gt-gt-gt-awk的语法" class="headerlink" title="&gt;&gt;&gt;awk的语法"></a>&gt;&gt;&gt;awk的语法</h3><label style="color:blue">首先，awk的语法都是“awk '{ 命令 }' filename ”的格式，相当于直接在命令行（黑框或者叫bash）处执行awk的命令。注意外面的filename就是我们要处理的目标文件<br>前面说过为了一些原因，我们把它写成脚本，然后“chmod 777 filename.awk”给个权限然后来执行（这里后缀不一定要.awk，起什么名字都可以）<br><br>然后为了建模我们学习一个split函数足矣<br>我们看模板第一个awk命令。split的语法格式是：<br><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">len = split(<span class="hljs-variable">$0</span> , table , <span class="hljs-string">","</span>);<br></code></pre></div></td></tr></table></figure><p>按顺序介绍参数的含义：返回值len（你可以起成任何名字）代表读取的元素数。遍历的时候会用。<br><br>$0,代表的是整行读入，无视一切。注意这个$0,$1,$2等等的语法和zpl不同，$0代表整行读入，$otherint代表的含义是不同的，具体别的整数代表什么网上可以搜到一张表,这里基本上用到$0足够<br><br>注意！！！awk会按照你的命令一次处理一行。一行处理完后会处理第二行直到处理完整个文件为止<br><br>table代表的是表名，是个一维表。后面的参数“，”代表以逗号为分割符号。<br><br>比如文件sister如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">haha 小猫 羊驼<br>2 3 猫头鹰 cat<br></code></pre></div></td></tr></table></figure><p>那么执行命令:<br></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">awk <span class="hljs-string">'&#123;<br>len = split($0 , table , ",");<br>&#125;'</span> sister<br></code></pre></div></td></tr></table></figure><p>之后，<br>对于第一行<br><br>len就是3<br><br>table[1] 就是 “haha”<br><br>table[3] 就是羊驼<br><br>第二行以此类推len就是 4了<br><br><br><br>然后执行输出。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-keyword">if</span>(table[1]!=<span class="hljs-string">"j"</span>)<br><span class="hljs-keyword">for</span>(  i = 3 ; i &lt;= len ;i++)<br>&#123;<br><span class="hljs-built_in">printf</span> <span class="hljs-string">"%s %s\n"</span>,table[1],table[i];<br>&#125;<br></code></pre></div></td></tr></table></figure><p>语句和c很类似。<br><br>第一行if判断是因为，这个文件第一行是表头。表头第一个元素是“j”。<br><br>也就是说这个文件大概长这样：<br></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">j,k,i<br>1,2,1,5<br>2,2,4,5,6<br>3,5,1,7,9,10<br>4,3,4<br></code></pre></div></td></tr></table></figure><p>我们当然对于第一行，table[1]就是j。我们自然不需要处理第一行。所以利用if来跳过<br><br>然后输出，对于每一行，很容易看见我们的处理方法。输出方式基本就是c语言。<br><br>模板第一个程序中，i从3开始的原因就是第三到最后代表的是与j相关的i。第二列是与j相关的k，我们不需要所以for从3开始<br><br><br><br>这样一来，执行命令就会按照我们想要的样子输出一个可供zpl使用的表<br><br>我们在执行命令的后面重定向一下 “命令 &gt; filename”.这当然是linux命令行的基础操作。把输出导入filename的文件中，供zpl使用即可<br><br><br><br>至此awk简易入门教程结束。<br><br>更多语法日后碰到或者你们不会问我的时候我会在后面命令补充里面添加。<br></p></label><h2 id="gt-gt-gt-gt-命令补充"><a href="#gt-gt-gt-gt-命令补充" class="headerlink" title="&gt;&gt;&gt;&gt;命令补充"></a>&gt;&gt;&gt;&gt;命令补充</h2>]]></content>
    
    
    
    <tags>
      
      <tag>ProgrammingLanguage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux教程(1)</title>
    <link href="/2019/06/19/SystemLearning/Linux%E6%95%99%E7%A8%8B(1)/"/>
    <url>/2019/06/19/SystemLearning/Linux%E6%95%99%E7%A8%8B(1)/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux命令学习不定期更新"><a href="#Linux命令学习不定期更新" class="headerlink" title="Linux命令学习不定期更新"></a><label style="color:blue">Linux命令学习不定期更新</label></h2><a id="more"></a><h2 id="这里学习linux的一些简单命令，不涉及如何写shell，如何配置linux等等的比较复杂点的东西。所有条目都将以“-gt-gt-gt-”开头"><a href="#这里学习linux的一些简单命令，不涉及如何写shell，如何配置linux等等的比较复杂点的东西。所有条目都将以“-gt-gt-gt-”开头" class="headerlink" title="这里学习linux的一些简单命令，不涉及如何写shell，如何配置linux等等的比较复杂点的东西。所有条目都将以“&gt;&gt;&gt;”开头"></a><label style="color:red">这里学习linux的一些简单命令，不涉及如何写shell，如何配置linux等等的比较复杂点的东西。所有条目都将以“&gt;&gt;&gt;”开头</label></h2><h3 id="gt-gt-gt-linux后台跑程序，查看程序，终止程序"><a href="#gt-gt-gt-linux后台跑程序，查看程序，终止程序" class="headerlink" title="&gt;&gt;&gt;linux后台跑程序，查看程序，终止程序"></a>&gt;&gt;&gt;linux后台跑程序，查看程序，终止程序</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nohup  命令 &amp;  ..............后台跑程序<br>ps 显示当前的进程<br>ps -x 显示进程以及进程号<br><span class="hljs-built_in">kill</span> -s num 杀死某个进程,num位进程对应的进程号<br><span class="hljs-built_in">kill</span> -s 9 （这个貌似等价于 <span class="hljs-built_in">kill</span> -s -KILL但没试过）强制杀死某个进程。非常有用<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-如何传文件到服务器或者从服务器下载文件到本地"><a href="#gt-gt-gt-如何传文件到服务器或者从服务器下载文件到本地" class="headerlink" title="&gt;&gt;&gt;如何传文件到服务器或者从服务器下载文件到本地"></a>&gt;&gt;&gt;如何传文件到服务器或者从服务器下载文件到本地</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">使用<span class="hljs-string">"scp"</span>命令.<br><span class="hljs-string">"（注意，：/开头的是从根目录找的，要是想放到个人目录下，直接去掉第一个斜杠XXX/XXX/XXX这样即可，或者~/XXX/XXX也可以）"</span><br><span class="hljs-string">"scp /home/work/source.txt work@192.168.0.10:/home/work/"</span>   <br><span class="hljs-comment">#把本地的source.txt文件拷贝到192.168.0.10机器上的/home/work目录下。</span><br><span class="hljs-string">"scp work@192.168.0.10:/home/work/source.txt /home/work/"</span>   <br><span class="hljs-comment">#把192.168.0.10机器上的source.txt文件拷贝到本地的/home/work目录下</span><br><span class="hljs-string">"scp work@192.168.0.10:/home/work/source.txt work@192.168.0.11:/home/work/"</span>   <br><span class="hljs-comment">#把192.168.0.10机器上的source.txt文件拷贝到192.168.0.11机器的/home/work目录下</span><br><span class="hljs-string">"scp -r /home/work/sourcedir work@192.168.0.10:/home/work/"</span>   <br><span class="hljs-comment">#拷贝文件夹，加-r参数.其他的都同上</span><br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-分配一个文件所有权限"><a href="#gt-gt-gt-分配一个文件所有权限" class="headerlink" title="&gt;&gt;&gt;分配一个文件所有权限"></a>&gt;&gt;&gt;分配一个文件所有权限</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">使用<span class="hljs-string">"chmod 777 filename"</span>可分配这个文件所有组件所有权限（读，写，执行）<br>其他权限用的时候再看编号即可<br>  ------------------<br>  777代表的分别是用户群组和其他人的权限<br>  也就是说700则是代表用户有所有权限，另外两个没有权限<br>  ------------------<br>  7代表的是二进制中的111等于7，按顺序分别是rwx<br>  所以比如我们说只给读和执行不给写的权限，就是二进制的101，也就是十进制的(1+4=5)<br>  也就是说<span class="hljs-string">"chmod 555 filename"</span>代表的是给所有人读和执行，但是不给写的权限<br></code></pre></div></td></tr></table></figure><label style="color:white">   我个人常用的给所有权限是“chmod 700 filename”   代表给用户满权限，感觉足矣。</label><h3 id="gt-gt-gt-设置新建文件夹的默认权限—-umask"><a href="#gt-gt-gt-设置新建文件夹的默认权限—-umask" class="headerlink" title="&gt;&gt;&gt;设置新建文件夹的默认权限—-umask"></a>&gt;&gt;&gt;设置新建文件夹的默认权限—-umask</h3><label style="color:purple">    利用命令“umask”<br>    比较复杂，详细介绍点击<a href="https://www.cnblogs.com/sench/p/8933638.html" target="_blank" rel="noopener">这里</a> <br>    我这里直接说干货：<br>    直接打“umask”可以查看umask的值<br>    然后“umask number”可以直接修改umask的值，number一般是一个四位数字，第一位直接是0不多解释，后三位，比如“umask 0abc”<br>    代表默认给用户的权限是“7-a”,另外两个同理是“7-b”和“7-c”<br>    那么也就是说假设我们要默认权限是700则直接如下设置即可：    <br>    umask 0077  <br></label><h3 id="gt-gt-gt-tar的使用，解压各类压缩文件"><a href="#gt-gt-gt-tar的使用，解压各类压缩文件" class="headerlink" title="&gt;&gt;&gt;tar的使用，解压各类压缩文件"></a>&gt;&gt;&gt;tar的使用，解压各类压缩文件</h3><label style="color:blue">一、功能： <br>解压      <br>二、参数：  <br>-c: 建立压缩档案 <br>-x：解压  <br>-t：查看内容  <br>-r：向压缩归档文件末尾追加文件  <br> -u：更新原压缩包中的文件  <br><p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。 <br> </p><p>-z：有gzip属性的<br>-j：有bz2属性的<br>-Z：有compress属性的<br>-v：显示所有过程<br>-O：将文件解开到标准输出</p><p>下面的参数-f是必须的<br>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。<br>三、举例说明：<br>tar -cf all.tar *.jpg<br>这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。<br>tar -rf all.tar *.gif<br>这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。<br>tar -uf all.tar logo.gif<br>这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。<br>tar -tf all.tar<br>这条命令是列出all.tar包中所有文件，-t是列出文件的意思<br>tar -xf all.tar<br>这条命令是解出all.tar包中所有文件，-t是解开的意思</p><p>四：干货（前面后面基本都不用看，到这里找对应的压缩即可。）<br>tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成jpg.tar<br>tar –czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz<br>tar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2<br>tar –cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z<br>rar a jpg.rar *.jpg //rar格式的压缩，需要先下载rar for linux<br>zip jpg.zip *.jpg //zip格式的压缩，需要先下载zip for linux<br>解压<br>tar –xvf file.tar //解压 tar包<br>tar -xzvf file.tar.gz //解压tar.gz<br>tar -xjvf file.tar.bz2   //解压 tar.bz2<br>tar –xZvf file.tar.Z   //解压tar.Z<br>unrar e file.rar //解压rar<br>unzip file.zip //解压zip</p><p>五、总结<br>1、<em>.tar 用 tar –xvf 解压<br>2、</em>.gz 用 gzip -d或者gunzip 解压<br>3、<em>.tar.gz和</em>.tgz 用 tar –xzf 解压<br>4、<em>.bz2 用 bzip2 -d或者用bunzip2 解压<br>5、</em>.tar.bz2用tar –xjf 解压<br>6、<em>.Z 用 uncompress 解压<br>7、</em>.tar.Z 用tar –xZf 解压<br>8、<em>.rar 用 unrar e解压<br>9、</em>.zip 用 unzip 解压</p></label><h3 id="gt-gt-gt-sudo-apt-get-autoremove"><a href="#gt-gt-gt-sudo-apt-get-autoremove" class="headerlink" title="&gt;&gt;&gt;sudo apt-get autoremove"></a>&gt;&gt;&gt;sudo apt-get autoremove</h3><h3 id="gt-gt-gt-未完待续"><a href="#gt-gt-gt-未完待续" class="headerlink" title="&gt;&gt;&gt;未完待续"></a>&gt;&gt;&gt;未完待续</h3>]]></content>
    
    
    
    <tags>
      
      <tag>SystemLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub教程</title>
    <link href="/2019/06/18/IDElearning/GitHub%E6%95%99%E7%A8%8B/"/>
    <url>/2019/06/18/IDElearning/GitHub%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="GitHub学习"><a href="#GitHub学习" class="headerlink" title="GitHub学习"></a><label style="color:yellow">GitHub学习</label></h2><a id="more"></a><h2 id="这边不定期的更新git的一些使用方法-所有条目都将以“-gt-gt-gt-”开头"><a href="#这边不定期的更新git的一些使用方法-所有条目都将以“-gt-gt-gt-”开头" class="headerlink" title="这边不定期的更新git的一些使用方法.所有条目都将以“&gt;&gt;&gt;”开头"></a><label style="color:red">这边不定期的更新git的一些使用方法.所有条目都将以“&gt;&gt;&gt;”开头</label></h2><h3 id="gt-gt-gt-git-branch"><a href="#gt-gt-gt-git-branch" class="headerlink" title="&gt;&gt;&gt;git branch"></a>&gt;&gt;&gt;git branch</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-string">"git branch"</span>可以查看当前所有分支并且显示自己当前所在的分支。<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-git-branch-BRANCHNAME"><a href="#gt-gt-gt-git-branch-BRANCHNAME" class="headerlink" title="&gt;&gt;&gt;git branch BRANCHNAME"></a>&gt;&gt;&gt;git branch BRANCHNAME</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-string">"git branch BranchName"</span><br>用来生成名为“BranchName”的分支<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-git-checkout-BRANCHNAME"><a href="#gt-gt-gt-git-checkout-BRANCHNAME" class="headerlink" title="&gt;&gt;&gt;git checkout BRANCHNAME"></a>&gt;&gt;&gt;git checkout BRANCHNAME</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-string">"git checkout BranchName"</span><br>切换得到“BranchName”这个分支<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-git-push-origin-lgm190622-1-lgm190622"><a href="#gt-gt-gt-git-push-origin-lgm190622-1-lgm190622" class="headerlink" title="&gt;&gt;&gt;git push origin lgm190622-1:lgm190622"></a>&gt;&gt;&gt;git push origin lgm190622-1:lgm190622</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-string">"git push origin lgm190622-1:lgm190622"</span><br>把本地的这个“lgm190622”的这个分支上传到远程的“lgm190622”的这个分支<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-git-commit-a-m-‘abcdefg…-’"><a href="#gt-gt-gt-git-commit-a-m-‘abcdefg…-’" class="headerlink" title="&gt;&gt;&gt;git commit -a -m ‘abcdefg….’"></a>&gt;&gt;&gt;git commit -a -m ‘abcdefg….’</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-string">"git commit -a -m 'abcdefg....'"</span><br>往分支上传所有更改，引号里是这次更改的备注<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-sed-i-“s-MIPSTATUS-OK-MIPStatus-Ok-g”-src-cmip"><a href="#gt-gt-gt-sed-i-“s-MIPSTATUS-OK-MIPStatus-Ok-g”-src-cmip" class="headerlink" title="&gt;&gt;&gt;sed -i “s/MIPSTATUS_OK/MIPStatus_Ok/g” ./src/cmip/*"></a>&gt;&gt;&gt;sed -i “s/MIPSTATUS_OK/MIPStatus_Ok/g” ./src/cmip/*</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-string">"包含双引号，这边就不重复了"</span><br>全局替换，s和g都属于参数（比较奇葩，这东西怎么看都像是一个路径）<br>含义是把“MIPSTATUS_OK”替换为“MIPStatus_Ok”<br>范围是后面那个文件，这里的意思是cmip里面的所有文件。<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-新的命令等待出炉"><a href="#gt-gt-gt-新的命令等待出炉" class="headerlink" title="&gt;&gt;&gt;新的命令等待出炉"></a>&gt;&gt;&gt;新的命令等待出炉</h3>]]></content>
    
    
    
    <tags>
      
      <tag>IDElearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim教程</title>
    <link href="/2019/06/18/IDElearning/Vim%E6%95%99%E7%A8%8B/"/>
    <url>/2019/06/18/IDElearning/Vim%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="vim命令学习不定期更新"><a href="#vim命令学习不定期更新" class="headerlink" title="vim命令学习不定期更新"></a><label style="color:yellow">vim命令学习不定期更新</label></h2><a id="more"></a><h2 id="最近因为要使用vim-所以不定期更新新学到的vim干货-所有条目都将以“-gt-gt-gt-”开头"><a href="#最近因为要使用vim-所以不定期更新新学到的vim干货-所有条目都将以“-gt-gt-gt-”开头" class="headerlink" title="最近因为要使用vim,所以不定期更新新学到的vim干货.所有条目都将以“&gt;&gt;&gt;”开头"></a><label style="color:red">最近因为要使用vim,所以不定期更新新学到的vim干货.所有条目都将以“&gt;&gt;&gt;”开头</label></h2><h3 id="gt-gt-gt-sudo-apt-get-install-vim"><a href="#gt-gt-gt-sudo-apt-get-install-vim" class="headerlink" title="&gt;&gt;&gt;sudo apt-get install vim"></a>&gt;&gt;&gt;sudo apt-get install vim</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">上来先下载vim，centos可能用yum版本。<br>注意有一种可能的下载失败是apt-get没有更新。<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-翻页命令"><a href="#gt-gt-gt-翻页命令" class="headerlink" title="&gt;&gt;&gt;翻页命令"></a>&gt;&gt;&gt;翻页命令</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">向上翻页：<span class="hljs-string">"ctrl+f"</span><br>向下翻页：<span class="hljs-string">"ctrl+b"</span><br>（f代表forward，b代表back）<br>---------------------------------<br>向上翻半页：<span class="hljs-string">"ctrl+u"</span><br>向下翻半页：<span class="hljs-string">"ctrl+d"</span><br>---------------------------------<br>向上滚一行：<span class="hljs-string">"ctrl+e"</span><br>向下滚一行：<span class="hljs-string">"ctrl+y"</span><br>---------------------------------<br><span class="hljs-string">"zz"</span>让光标所在的行居于屏幕中间<br><span class="hljs-string">"zt"</span>让光标所在的行居于屏幕最上方（t代表top）<br><span class="hljs-string">"zb"</span>让光标所在的行居于屏幕最下方（b代表bottom）<br>---------------------------------<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-按字符串在文件中搜索"><a href="#gt-gt-gt-按字符串在文件中搜索" class="headerlink" title="&gt;&gt;&gt;按字符串在文件中搜索"></a>&gt;&gt;&gt;按字符串在文件中搜索</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">从开头搜索<br>在命令模式下，输入<span class="hljs-string">"/你要查找的字符"</span><br>按下回车，可以看到vim把光标移动到该字符处<br>再按n（小写）查看下一个匹配<br>按N（大写）查看上一个匹配，<br>----------------------------------<br>从结尾处搜索<br><span class="hljs-string">"？要搜索的字符串或字符"</span><br>其余同从开头搜索<br>----------------------------------<br>搜索后，打开别的文件发现也被高亮了，怎么关闭<br>命令行模式下，输入：<span class="hljs-string">"nohlsearch"</span><br>也可以：<span class="hljs-string">"set nohlsearch"</span> <br>可以简写成<span class="hljs-string">"noh"</span>和<span class="hljs-string">"set-noh"</span><br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-vim跳转到指定行"><a href="#gt-gt-gt-vim跳转到指定行" class="headerlink" title="&gt;&gt;&gt;vim跳转到指定行"></a>&gt;&gt;&gt;vim跳转到指定行</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">第一种方法<br>直接在命令行模式输入<span class="hljs-string">"：所要跳转的行数"</span>即可<br>----------------------------------<br>第二种方法可以在外面直接进入并且跳转行<br><span class="hljs-string">"vim +n filename"</span>(注意这里意思是要输入加号)<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-显示行号"><a href="#gt-gt-gt-显示行号" class="headerlink" title="&gt;&gt;&gt;显示行号"></a>&gt;&gt;&gt;显示行号</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">命令模式直接：<span class="hljs-string">":set number"</span><br>也可以通过设置永久显示行号，这个我回头有时间会更新在这里~~~~~~~~~~~~~~~<br></code></pre></div></td></tr></table></figure><h3 id="gt-gt-gt-新的使用干货正在出炉"><a href="#gt-gt-gt-新的使用干货正在出炉" class="headerlink" title="&gt;&gt;&gt;新的使用干货正在出炉"></a>&gt;&gt;&gt;新的使用干货正在出炉</h3>]]></content>
    
    
    
    <tags>
      
      <tag>IDElearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aboutme</title>
    <link href="/2019/06/01/aboutme/aboutme/"/>
    <url>/2019/06/01/aboutme/aboutme/</url>
    
    <content type="html"><![CDATA[<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a><label style="color:yellow">关于我</label></h2>   <a id="more"></a><label style="color:purple; font-size:17px;font-weight:normal">能点进来看这里，我只能说你他娘的是个人才......这里可以了解到我的大概经历和目前的大致活动。本科以及之前的经历就泛泛带过了。人生格言么，最近比较喜欢这句话，至少希望自己心境是这样的：<br>春困秋乏夏打盹儿，睡不醒的冬三月</label><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">之前的博客我密码给忘了，这个是重新建立起自己的博客。<br>还有个当时我组织华为杯时候的那个临时博客。<br>不过可能打不开，我依旧是忘记了密码，地址是cnilin15.github.io算是一部分回忆幸存。<br>里面没什么干货，不过有几篇文章教你如何写dll动态链接库，整个博文内容都是涉及当时我写的一个对抗蛇游戏。<br>玩家设计代码，代码和代码对抗。游戏是看谁的算法厉害，有点像机器人pk。清华大学平台这类游戏很多。<br>如果你想到一个有趣的游戏，可以找我搭建平台组织比赛，你只需要把想法告诉我。<br>这种东西观赏性很高，很有意思，可能是未来娱乐发展趋势。<br>通过规则限制，让程序去跑，所以不像直接的电脑病毒对抗那么专业性强且没观赏性。<br></code></pre></div></td></tr></table></figure><br><h3 id="acm经历"><a href="#acm经历" class="headerlink" title="acm经历"></a>acm经历</h3><label style="color:purple;font-size: 17px">____拿得出手的成绩么，山东省省金算吧。那时候我还是个初生牛犊（好像现在也是，而且一直都不会改变）。后来当13级队长，真的是为了实现当年拿到区域赛金牌打进worldfinal的承诺。<br>____但是中间发生了hen多事，各方面原因都有，最后没能成功。千言万语归结为我的成长度不够吧，除了自己的一些学习上的问题。组织队友，领导团队之类的也有不足。多说无益，成长，然后继续努力就完事了。<br></label><h3 id="考研经历"><a href="#考研经历" class="headerlink" title="考研经历"></a>考研经历</h3><label style="color:purple;font-size: 17px">____先说说动机。因为acm比赛，很多人说我编程厉害。但是作为信仰，还是更希望数学得到认可。所以考研直接就考的纯数学，不出意外地进入了初试。至少数学实力给了自己证明，所以复试被踢我直接就调剂了没再考，不然以我的性格我会继续。考的浙大。进复试被踢这估计是最悲催的一种死法了，究其原因是我初试完感觉自己贼稳就没怎么重视复试。结果初试分也不是数一数二的，所以跪了。<br>____当然还有兄弟们的一些什么“没找老师”之类的说法，也成立吧。总结一下基本上叫实力不行，运气更不行，还不找老师，简直情商也不行。不过这次应该真的成长很多……失败？没有，我当打之年没这个词语。这种事只会让我更强大。<br>____还有一件事，就是人生中第一次被人指着鼻子喷菜。这人是浙江大学李方教授。我当时完全无力反抗，因为教授确实比我强太多了。但我挺生气也挺开心。生气是因为我不服，如果我能站到更强的领奖台上，我会提起这件事，到时候教授也没机会反驳我。当然还是互相尊重的，就当这是一种积极的学术竞争罢。开心是因为，我这几年确实颓废，尽管如此，听到的声音一直都是膜拜和鼓励之类的，终于有一个教授说了实话而且当着我的面，我很感激。<br></label><h3 id="厦门理工大学（2019-3-2019-6）"><a href="#厦门理工大学（2019-3-2019-6）" class="headerlink" title="厦门理工大学（2019/3-2019/6）"></a>厦门理工大学（2019/3-2019/6）</h3><label style="color:blue; font-size:17px"> ____复试刚刚失败，那时候的感觉，我几个月后还记忆犹新。三月中下旬，整个人都精疲力竭，但是还得准备调剂。调剂者没有人权，这句话一点不错，任何学校都可以说要你，也可以在复试前无条件拒绝你。你在发送调剂请求之后，学校除了拒绝你，完全还可以鸽着你把你当备胎。同时，因为调剂对象是全国各个大学，所以，来回飞的机票也不是我所能承受的起的。那时候在浙江失败后，我不敢回家，因为家离浙江很远，假设我再调剂到一个比较远的学校，机票费可想而知。幸得得好友赵鑫相助，我得以在厦门休养生息。后来当然调剂的学校和一志愿还是有所差距，所以调剂复试也顺利通过。<br>____在厦门理工大学的时间是沙滩阳光般的美好回忆。这几个月我能够很好反思自己的过去。虽然复试经历让我很难受，但是我内心很开心，反观本科时候颓废的我，我想我需要的正是一场暴风雨来惊醒自己。我庆幸自己从温水煮青蛙的时间跳了出来，庆幸自己又经历完终结长期颓废所必须的打击。那么这段时间不如放纵一下，尽情歇息。<br>____在厦门理工大学，我结识了很多朋友。除了老朋友赵鑫之外。比如德进，金海，天成，春妹，建民，尚琦，龙慧等等的。在厦门我和朋友游玩了jingcuoan，几乎天天打羽毛球，真的非常开心，也让我得到了很好的缓息，感谢大家，江湖有缘再见！<br>____六月中旬，应好友张吾的邀请，来到中科院，我也已歇息充分，丢掉了自己过去的种种包袱。既然过去有所后悔，与其后悔，作为实力派，不如现在就用手亲自创造属于未来自己的过去。我准备好了。<br>    </label><h3 id="开发经历（2019-4一个月）"><a href="#开发经历（2019-4一个月）" class="headerlink" title="开发经历（2019/4一个月）"></a>开发经历（2019/4一个月）</h3><label style="color:purple;font-size: 17px">____后来第一次用游戏引擎unity开发游戏。持续了一个月吧。时间虽短但是收获很多。也改变了我的一些想法，应该算是进步。我之前认为做什么事都要追根溯源。数学的确是这样，因为这样可以提供很多思路。但编程不一定了。<br>____我是一个编程和数学双攻的人，希望自己跟冯诺依曼一样。这次经历之后，我发现，其实编程不能太要求追根溯源。比如写个游戏完全不必在opengl这种东西上浪费时间，完全不用管电脑后台是怎么运行的。如果直接再引擎上面写，可以节约很多时间而且把可以把更多精力放在开发内容本身上面。我是人，所以一定要学会站在巨人的肩膀上。<br></label><h3 id="中科院一期（2019-6-至今）"><a href="#中科院一期（2019-6-至今）" class="headerlink" title="中科院一期（2019/6-至今）"></a>中科院一期（2019/6-至今）</h3><p><label style="color:purple;font-size:17px">doing</label></p><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><label style="color:purple;font-size:17px">____五年前我立的flag是19年去剑桥大学。现在19年了，非但没有实现反而差的很远。随着18年3月14日霍金的死去对我的打击很大，同时让我惊醒。我发誓不再自命不凡，仗着自己的天赋去偷懒，去沉迷无聊之事。我相信，我拥有的独特而天马行空般的思维，一定是上帝的让我背负着的某种责任。人类文明发展中也一定少不了属于我的这一笔。所以就算我因为种种原因变得颓废，我也一定要最后站起来。曾经我希望自己是一代王者，随着知识不断积累，我能感受到自己是多么的渺小。那么现在，王者也好平凡者也罢，未曾改变的是我特有的那份洒脱和霸气，我很开心。<br></label>]]></content>
    
    
    
    <tags>
      
      <tag>aboutme</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
